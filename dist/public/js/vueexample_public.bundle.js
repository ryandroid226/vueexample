/*! For license information please see vueexample_public.bundle.js.LICENSE.txt */
(()=>{var e={"./public/js/somevuepage/components/SomeVuePage.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var r=n("./public/js/somevuepage/components/SomeVuePage.vue?vue&type=template&id=bccb11b8&"),o=n("./public/js/somevuepage/components/SomeVuePage.vue?vue&type=script&lang=js&"),i=(0,n("./node_modules/vue-loader/lib/runtime/componentNormalizer.js").default)(o.default,r.render,r.staticRenderFns,!1,null,null,null);i.options.__file="public/js/somevuepage/components/SomeVuePage.vue";const a=i.exports},"./node_modules/vue-loader/lib/index.js??vue-loader-options!./public/js/somevuepage/components/SomeVuePage.vue?vue&type=script&lang=js&":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r={data:()=>({potatoes:"Potatoes"})}},"./public/js/somevuepage/components/SomeVuePage.vue?vue&type=script&lang=js&":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});const r=n("./node_modules/vue-loader/lib/index.js??vue-loader-options!./public/js/somevuepage/components/SomeVuePage.vue?vue&type=script&lang=js&").default},"./public/js/somevuepage/components/SomeVuePage.vue?vue&type=template&id=bccb11b8&":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r.render,staticRenderFns:()=>r.staticRenderFns});var r=n("./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./public/js/somevuepage/components/SomeVuePage.vue?vue&type=template&id=bccb11b8&")},"./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./public/js/somevuepage/components/SomeVuePage.vue?vue&type=template&id=bccb11b8&":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r,staticRenderFns:()=>o});var r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h2",[e._v("Meat and "+e._s(e.potatoes))])])},o=[];r._withStripped=!0},"./node_modules/vue-loader/lib/runtime/componentNormalizer.js":(e,t,n)=>{"use strict";function r(e,t,n,r,o,i,a,s){var c,u="function"==typeof e?e.options:e;if(t&&(u.render=t,u.staticRenderFns=n,u._compiled=!0),r&&(u.functional=!0),i&&(u._scopeId="data-v-"+i),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),o&&o.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(a)},u._ssrRegister=c):o&&(c=s?function(){o.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:o),c)if(u.functional){u._injectStyles=c;var l=u.render;u.render=function(e,t){return c.call(t),l(e,t)}}else{var d=u.beforeCreate;u.beforeCreate=d?[].concat(d,c):[c]}return{exports:e,options:u}}n.r(t),n.d(t,{default:()=>r})},"./node_modules/vue/dist/vue.runtime.esm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>hi});var r=Object.freeze({});function o(e){return null==e}function i(e){return null!=e}function a(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function c(e){return null!==e&&"object"==typeof e}var u=Object.prototype.toString;function l(e){return u.call(e).slice(8,-1)}function d(e){return"[object Object]"===u.call(e)}function f(e){return"[object RegExp]"===u.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function v(e){return i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function h(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function m(e){var t=parseFloat(e);return isNaN(t)?e:t}function y(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var g=y("slot,component",!0),_=y("key,ref,slot,slot-scope,is");function b(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var w=Object.prototype.hasOwnProperty;function $(e,t){return w.call(e,t)}function C(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var x=/-(\w)/g,A=C((function(e){return e.replace(x,(function(e,t){return t?t.toUpperCase():""}))})),k=C((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),O=/\B([A-Z])/g,S=C((function(e){return e.replace(O,"-$1").toLowerCase()})),j=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function T(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function E(e,t){for(var n in t)e[n]=t[n];return e}function I(e){for(var t={},n=0;n<e.length;n++)e[n]&&E(t,e[n]);return t}function N(e,t,n){}var P=function(e,t,n){return!1},M=function(e){return e};function D(e,t){if(e===t)return!0;var n=c(e),r=c(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every((function(e,n){return D(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||i)return!1;var a=Object.keys(e),s=Object.keys(t);return a.length===s.length&&a.every((function(n){return D(e[n],t[n])}))}catch(e){return!1}}function L(e,t){for(var n=0;n<e.length;n++)if(D(e[n],t))return n;return-1}function F(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var V="data-server-rendered",R=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],H={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:N,parsePlatformTagName:M,mustUseProp:P,async:!0,_lifecycleHooks:U},B=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function z(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function q(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var W,K=new RegExp("[^"+B.source+".$_\\d]"),X="__proto__"in{},Y="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,J=G&&WXEnvironment.platform.toLowerCase(),Z=Y&&window.navigator.userAgent.toLowerCase(),Q=Z&&/msie|trident/.test(Z),ee=Z&&Z.indexOf("msie 9.0")>0,te=Z&&Z.indexOf("edge/")>0,ne=(Z&&Z.indexOf("android"),Z&&/iphone|ipad|ipod|ios/.test(Z)||"ios"===J),re=(Z&&/chrome\/\d+/.test(Z),Z&&/phantomjs/.test(Z),Z&&Z.match(/firefox\/(\d+)/)),oe={}.watch,ie=!1;if(Y)try{var ae={};Object.defineProperty(ae,"passive",{get:function(){ie=!0}}),window.addEventListener("test-passive",null,ae)}catch(e){}var se=function(){return void 0===W&&(W=!Y&&!G&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),W},ce=Y&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ue(e){return"function"==typeof e&&/native code/.test(e.toString())}var le,de="undefined"!=typeof Symbol&&ue(Symbol)&&"undefined"!=typeof Reflect&&ue(Reflect.ownKeys);le="undefined"!=typeof Set&&ue(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var fe,pe,ve,he=N,me="undefined"!=typeof console,ye=/(?:^|[-_])(\w)/g;fe=function(e,t){var n=t?he(t):"";H.warnHandler?H.warnHandler.call(null,e,t,n):me&&!H.silent&&console.error("[Vue warn]: "+e+n)},pe=function(e,t){me&&!H.silent&&console.warn("[Vue tip]: "+e+(t?he(t):""))},ve=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+r.replace(ye,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")+">":"<Anonymous>")+(o&&!1!==t?" at "+o:"")},he=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n}(" ",5+2*t))+(Array.isArray(e)?ve(e[0])+"... ("+e[1]+" recursive calls)":ve(e))})).join("\n")}return"\n\n(found in "+ve(e)+")"};var ge=0,_e=function(){this.id=ge++,this.subs=[]};_e.prototype.addSub=function(e){this.subs.push(e)},_e.prototype.removeSub=function(e){b(this.subs,e)},_e.prototype.depend=function(){_e.target&&_e.target.addDep(this)},_e.prototype.notify=function(){var e=this.subs.slice();H.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},_e.target=null;var be=[];function we(e){be.push(e),_e.target=e}function $e(){be.pop(),_e.target=be[be.length-1]}var Ce=function(e,t,n,r,o,i,a,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},xe={child:{configurable:!0}};xe.child.get=function(){return this.componentInstance},Object.defineProperties(Ce.prototype,xe);var Ae=function(e){void 0===e&&(e="");var t=new Ce;return t.text=e,t.isComment=!0,t};function ke(e){return new Ce(void 0,void 0,void 0,String(e))}function Oe(e){var t=new Ce(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Se=Array.prototype,je=Object.create(Se);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Se[e];q(je,e,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=t.apply(this,n),a=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&a.observeArray(o),a.dep.notify(),i}))}));var Te=Object.getOwnPropertyNames(je),Ee=!0;function Ie(e){Ee=e}var Ne=function(e){this.value=e,this.dep=new _e,this.vmCount=0,q(e,"__ob__",this),Array.isArray(e)?(X?function(e,t){e.__proto__=t}(e,je):function(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];q(e,i,t[i])}}(e,je,Te),this.observeArray(e)):this.walk(e)};function Pe(e,t){var n;if(c(e)&&!(e instanceof Ce))return $(e,"__ob__")&&e.__ob__ instanceof Ne?n=e.__ob__:Ee&&!se()&&(Array.isArray(e)||d(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Ne(e)),t&&n&&n.vmCount++,n}function Me(e,t,n,r,o){var i=new _e,a=Object.getOwnPropertyDescriptor(e,t);if(!a||!1!==a.configurable){var s=a&&a.get,c=a&&a.set;s&&!c||2!==arguments.length||(n=e[t]);var u=!o&&Pe(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return _e.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(t)&&Fe(t))),t},set:function(t){var a=s?s.call(e):n;t===a||t!=t&&a!=a||(r&&r(),s&&!c||(c?c.call(e,t):n=t,u=!o&&Pe(t),i.notify()))}})}}function De(e,t,n){if((o(e)||s(e))&&fe("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?(fe("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(Me(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function Le(e,t){if((o(e)||s(e))&&fe("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?fe("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):$(e,t)&&(delete e[t],n&&n.dep.notify())}}function Fe(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&Fe(t)}Ne.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)Me(e,t[n])},Ne.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Pe(e[t])};var Ve=H.optionMergeStrategies;function Re(e,t){if(!t)return e;for(var n,r,o,i=de?Reflect.ownKeys(t):Object.keys(t),a=0;a<i.length;a++)"__ob__"!==(n=i[a])&&(r=e[n],o=t[n],$(e,n)?r!==o&&d(r)&&d(o)&&Re(r,o):De(e,n,o));return e}function Ue(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?Re(r,o):o}:t?e?function(){return Re("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function He(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Be(e,t,n,r){var o=Object.create(e||null);return t?(We(r,t,n),E(o,t)):o}Ve.el=Ve.propsData=function(e,t,n,r){return n||fe('option "'+r+'" can only be used during instance creation with the `new` keyword.'),ze(e,t)},Ve.data=function(e,t,n){return n?Ue(e,t,n):t&&"function"!=typeof t?(fe('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Ue(e,t)},U.forEach((function(e){Ve[e]=He})),R.forEach((function(e){Ve[e+"s"]=Be})),Ve.watch=function(e,t,n,r){if(e===oe&&(e=void 0),t===oe&&(t=void 0),!t)return Object.create(e||null);if(We(r,t,n),!e)return t;var o={};for(var i in E(o,e),t){var a=o[i],s=t[i];a&&!Array.isArray(a)&&(a=[a]),o[i]=a?a.concat(s):Array.isArray(s)?s:[s]}return o},Ve.props=Ve.methods=Ve.inject=Ve.computed=function(e,t,n,r){if(t&&We(r,t,n),!e)return t;var o=Object.create(null);return E(o,e),t&&E(o,t),o},Ve.provide=Ue;var ze=function(e,t){return void 0===t?e:t};function qe(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+B.source+"]*$").test(e)||fe('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(g(e)||H.isReservedTag(e))&&fe("Do not use built-in or reserved HTML elements as component id: "+e)}function We(e,t,n){d(t)||fe('Invalid value for option "'+e+'": expected an Object, but got '+l(t)+".",n)}function Ke(e,t,n){if(function(e){for(var t in e.components)qe(t)}(t),"function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])?i[A(o)]={type:null}:fe("props must be strings when using array syntax.");else if(d(n))for(var a in n)o=n[a],i[A(a)]=d(o)?o:{type:o};else fe('Invalid value for option "props": expected an Array or an Object, but got '+l(n)+".",t);e.props=i}}(t,n),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(d(n))for(var i in n){var a=n[i];r[i]=d(a)?E({from:i},a):{from:a}}else fe('Invalid value for option "inject": expected an Array or an Object, but got '+l(n)+".",t)}}(t,n),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=Ke(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=Ke(e,t.mixins[r],n);var i,a={};for(i in e)s(i);for(i in t)$(e,i)||s(i);function s(r){var o=Ve[r]||ze;a[r]=o(e[r],t[r],n,r)}return a}function Xe(e,t,n,r){if("string"==typeof n){var o=e[t];if($(o,n))return o[n];var i=A(n);if($(o,i))return o[i];var a=k(i);if($(o,a))return o[a];var s=o[n]||o[i]||o[a];return r&&!s&&fe("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function Ye(e,t,n,r){var o=t[e],i=!$(n,e),a=n[e],s=tt(Boolean,o.type);if(s>-1)if(i&&!$(o,"default"))a=!1;else if(""===a||a===S(e)){var u=tt(String,o.type);(u<0||s<u)&&(a=!0)}if(void 0===a){a=function(e,t,n){if($(t,"default")){var r=t.default;return c(r)&&fe('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof r&&"Function"!==Qe(t.type)?r.call(e):r}}(r,o,e);var d=Ee;Ie(!0),Pe(a),Ie(d)}return function(e,t,n,r,o){if(e.required&&o)fe('Missing required prop: "'+t+'"',r);else if(null!=n||e.required){var i=e.type,a=!i||!0===i,s=[];if(i){Array.isArray(i)||(i=[i]);for(var c=0;c<i.length&&!a;c++){var u=Je(n,i[c],r);s.push(u.expectedType||""),a=u.valid}}var d=s.some((function(e){return e}));if(a||!d){var f=e.validator;f&&(f(n)||fe('Invalid prop: custom validator check failed for prop "'+t+'".',r))}else fe(function(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(k).join(", "),o=n[0],i=l(t);return 1===n.length&&ot(o)&&ot(typeof t)&&!function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}(o,i)&&(r+=" with value "+nt(t,o)),r+=", got "+i+" ",ot(i)&&(r+="with value "+nt(t,i)+"."),r}(t,n,s),r)}}(o,e,a,r,i),a}var Ge=/^(String|Number|Boolean|Function|Symbol|BigInt)$/;function Je(e,t,n){var r,o=Qe(t);if(Ge.test(o)){var i=typeof e;(r=i===o.toLowerCase())||"object"!==i||(r=e instanceof t)}else if("Object"===o)r=d(e);else if("Array"===o)r=Array.isArray(e);else try{r=e instanceof t}catch(e){fe('Invalid prop type: "'+String(t)+'" is not a constructor',n),r=!1}return{valid:r,expectedType:o}}var Ze=/^\s*function (\w+)/;function Qe(e){var t=e&&e.toString().match(Ze);return t?t[1]:""}function et(e,t){return Qe(e)===Qe(t)}function tt(e,t){if(!Array.isArray(t))return et(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(et(t[n],e))return n;return-1}function nt(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}var rt=["string","number","boolean"];function ot(e){return rt.some((function(t){return e.toLowerCase()===t}))}function it(e,t,n){we();try{if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,e,t,n))return}catch(e){st(e,r,"errorCaptured hook")}}st(e,t,n)}finally{$e()}}function at(e,t,n,r,o){var i;try{(i=n?e.apply(t,n):e.call(t))&&!i._isVue&&v(i)&&!i._handled&&(i.catch((function(e){return it(e,r,o+" (Promise/async)")})),i._handled=!0)}catch(e){it(e,r,o)}return i}function st(e,t,n){if(H.errorHandler)try{return H.errorHandler.call(null,e,t,n)}catch(t){t!==e&&ct(t,null,"config.errorHandler")}ct(e,t,n)}function ct(e,t,n){if(fe("Error in "+n+': "'+e.toString()+'"',t),!Y&&!G||"undefined"==typeof console)throw e;console.error(e)}var ut,lt,dt=!1,ft=[],pt=!1;function vt(){pt=!1;var e=ft.slice(0);ft.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ue(Promise)){var ht=Promise.resolve();ut=function(){ht.then(vt),ne&&setTimeout(N)},dt=!0}else if(Q||"undefined"==typeof MutationObserver||!ue(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())ut="undefined"!=typeof setImmediate&&ue(setImmediate)?function(){setImmediate(vt)}:function(){setTimeout(vt,0)};else{var mt=1,yt=new MutationObserver(vt),gt=document.createTextNode(String(mt));yt.observe(gt,{characterData:!0}),ut=function(){mt=(mt+1)%2,gt.data=String(mt)},dt=!0}function _t(e,t){var n;if(ft.push((function(){if(e)try{e.call(t)}catch(e){it(e,t,"nextTick")}else n&&n(t)})),pt||(pt=!0,ut()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var bt=y("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"),wt=function(e,t){fe('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},$t=function(e,t){fe('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',e)},Ct="undefined"!=typeof Proxy&&ue(Proxy);if(Ct){var xt=y("stop,prevent,self,ctrl,shift,alt,meta,exact");H.keyCodes=new Proxy(H.keyCodes,{set:function(e,t,n){return xt(t)?(fe("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var At={has:function(e,t){var n=t in e,r=bt(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?$t(e,t):wt(e,t)),n||!r}},kt={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?$t(e,t):wt(e,t)),e[t]}};lt=function(e){if(Ct){var t=e.$options,n=t.render&&t.render._withStripped?kt:At;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Ot,St,jt=new le;function Tt(e){Et(e,jt),jt.clear()}function Et(e,t){var n,r,o=Array.isArray(e);if(!(!o&&!c(e)||Object.isFrozen(e)||e instanceof Ce)){if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o)for(n=e.length;n--;)Et(e[n],t);else for(n=(r=Object.keys(e)).length;n--;)Et(e[r[n]],t)}}var It=Y&&window.performance;It&&It.mark&&It.measure&&It.clearMarks&&It.clearMeasures&&(Ot=function(e){return It.mark(e)},St=function(e,t,n){It.measure(e,t,n),It.clearMarks(t),It.clearMarks(n)});var Nt=C((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function Pt(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return at(r,null,arguments,t,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)at(o[i],null,e,t,"v-on handler")}return n.fns=e,n}function Mt(e,t,n,r,i,s){var c,u,l,d;for(c in e)u=e[c],l=t[c],d=Nt(c),o(u)?fe('Invalid handler for event "'+d.name+'": got '+String(u),s):o(l)?(o(u.fns)&&(u=e[c]=Pt(u,s)),a(d.once)&&(u=e[c]=i(d.name,u,d.capture)),n(d.name,u,d.capture,d.passive,d.params)):u!==l&&(l.fns=u,e[c]=l);for(c in t)o(e[c])&&r((d=Nt(c)).name,t[c],d.capture)}function Dt(e,t,n){var r;e instanceof Ce&&(e=e.data.hook||(e.data.hook={}));var s=e[t];function c(){n.apply(this,arguments),b(r.fns,c)}o(s)?r=Pt([c]):i(s.fns)&&a(s.merged)?(r=s).fns.push(c):r=Pt([s,c]),r.merged=!0,e[t]=r}function Lt(e,t,n,r,o){if(i(t)){if($(t,n))return e[n]=t[n],o||delete t[n],!0;if($(t,r))return e[n]=t[r],o||delete t[r],!0}return!1}function Ft(e){return s(e)?[ke(e)]:Array.isArray(e)?Rt(e):void 0}function Vt(e){return i(e)&&i(e.text)&&!1===e.isComment}function Rt(e,t){var n,r,c,u,l=[];for(n=0;n<e.length;n++)o(r=e[n])||"boolean"==typeof r||(u=l[c=l.length-1],Array.isArray(r)?r.length>0&&(Vt((r=Rt(r,(t||"")+"_"+n))[0])&&Vt(u)&&(l[c]=ke(u.text+r[0].text),r.shift()),l.push.apply(l,r)):s(r)?Vt(u)?l[c]=ke(u.text+r):""!==r&&l.push(ke(r)):Vt(r)&&Vt(u)?l[c]=ke(u.text+r.text):(a(e._isVList)&&i(r.tag)&&o(r.key)&&i(t)&&(r.key="__vlist"+t+"_"+n+"__"),l.push(r)));return l}function Ut(e,t){if(e){for(var n=Object.create(null),r=de?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var a=e[i].from,s=t;s;){if(s._provided&&$(s._provided,a)){n[i]=s._provided[a];break}s=s.$parent}if(!s)if("default"in e[i]){var c=e[i].default;n[i]="function"==typeof c?c.call(t):c}else fe('Injection "'+i+'" not found',t)}}return n}}function Ht(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var i=e[r],a=i.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,i.context!==t&&i.fnContext!==t||!a||null==a.slot)(n.default||(n.default=[])).push(i);else{var s=a.slot,c=n[s]||(n[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(Bt)&&delete n[u];return n}function Bt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function zt(e){return e.isComment&&e.asyncFactory}function qt(e,t,n){var o,i=Object.keys(t).length>0,a=e?!!e.$stable:!i,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&n&&n!==r&&s===n.$key&&!i&&!n.$hasNormal)return n;for(var c in o={},e)e[c]&&"$"!==c[0]&&(o[c]=Wt(t,c,e[c]))}else o={};for(var u in t)u in o||(o[u]=Kt(t,u));return e&&Object.isExtensible(e)&&(e._normalized=o),q(o,"$stable",a),q(o,"$key",s),q(o,"$hasNormal",i),o}function Wt(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({}),t=(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:Ft(e))&&e[0];return e&&(!t||1===e.length&&t.isComment&&!zt(t))?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function Kt(e,t){return function(){return e[t]}}function Xt(e,t){var n,r,o,a,s;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,o=e.length;r<o;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(c(e))if(de&&e[Symbol.iterator]){n=[];for(var u=e[Symbol.iterator](),l=u.next();!l.done;)n.push(t(l.value,n.length)),l=u.next()}else for(a=Object.keys(e),n=new Array(a.length),r=0,o=a.length;r<o;r++)s=a[r],n[r]=t(e[s],s,r);return i(n)||(n=[]),n._isVList=!0,n}function Yt(e,t,n,r){var o,i=this.$scopedSlots[e];i?(n=n||{},r&&(c(r)||fe("slot v-bind without argument expects an Object",this),n=E(E({},r),n)),o=i(n)||("function"==typeof t?t():t)):o=this.$slots[e]||("function"==typeof t?t():t);var a=n&&n.slot;return a?this.$createElement("template",{slot:a},o):o}function Gt(e){return Xe(this.$options,"filters",e,!0)||M}function Jt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function Zt(e,t,n,r,o){var i=H.keyCodes[t]||n;return o&&r&&!H.keyCodes[t]?Jt(o,r):i?Jt(i,e):r?S(r)!==t:void 0===e}function Qt(e,t,n,r,o){if(n)if(c(n)){var i;Array.isArray(n)&&(n=I(n));var a=function(a){if("class"===a||"style"===a||_(a))i=e;else{var s=e.attrs&&e.attrs.type;i=r||H.mustUseProp(t,s,a)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var c=A(a),u=S(a);c in i||u in i||(i[a]=n[a],o&&((e.on||(e.on={}))["update:"+a]=function(e){n[a]=e}))};for(var s in n)a(s)}else fe("v-bind without argument expects an Object or Array value",this);return e}function en(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||nn(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function tn(e,t,n){return nn(e,"__once__"+t+(n?"_"+n:""),!0),e}function nn(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&rn(e[r],t+"_"+r,n);else rn(e,t,n)}function rn(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function on(e,t){if(t)if(d(t)){var n=e.on=e.on?E({},e.on):{};for(var r in t){var o=n[r],i=t[r];n[r]=o?[].concat(o,i):i}}else fe("v-on without argument expects an Object value",this);return e}function an(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var i=e[o];Array.isArray(i)?an(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return r&&(t.$key=r),t}function sn(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&fe("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function cn(e,t){return"string"==typeof e?t+e:e}function un(e){e._o=tn,e._n=m,e._s=h,e._l=Xt,e._t=Yt,e._q=D,e._i=L,e._m=en,e._f=Gt,e._k=Zt,e._b=Qt,e._v=ke,e._e=Ae,e._u=an,e._g=on,e._d=sn,e._p=cn}function ln(e,t,n,o,i){var s,c=this,u=i.options;$(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var l=a(u._compiled),d=!l;this.data=e,this.props=t,this.children=n,this.parent=o,this.listeners=e.on||r,this.injections=Ut(u.inject,o),this.slots=function(){return c.$slots||qt(e.scopedSlots,c.$slots=Ht(n,o)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return qt(e.scopedSlots,this.slots())}}),l&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=qt(e.scopedSlots,this.$slots)),u._scopeId?this._c=function(e,t,n,r){var i=yn(s,e,t,n,r,d);return i&&!Array.isArray(i)&&(i.fnScopeId=u._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return yn(s,e,t,n,r,d)}}function dn(e,t,n,r,o){var i=Oe(e);return i.fnContext=n,i.fnOptions=r,(i.devtoolsMeta=i.devtoolsMeta||{}).renderContext=o,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function fn(e,t){for(var n in t)e[A(n)]=t[n]}un(ln.prototype);var pn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;pn.prepatch(n,n)}else(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;return i(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new e.componentOptions.Ctor(n)}(e,On)).$mount(t?e.elm:void 0,t)},prepatch:function(e,t){var n=t.componentOptions;!function(e,t,n,o,i){Sn=!0;var a=o.data.scopedSlots,s=e.$scopedSlots,c=!!(a&&!a.$stable||s!==r&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key||!a&&e.$scopedSlots.$key),u=!!(i||e.$options._renderChildren||c);if(e.$options._parentVnode=o,e.$vnode=o,e._vnode&&(e._vnode.parent=o),e.$options._renderChildren=i,e.$attrs=o.data.attrs||r,e.$listeners=n||r,t&&e.$options.props){Ie(!1);for(var l=e._props,d=e.$options._propKeys||[],f=0;f<d.length;f++){var p=d[f],v=e.$options.props;l[p]=Ye(p,v,t,e)}Ie(!0),e.$options.propsData=t}n=n||r;var h=e.$options._parentListeners;e.$options._parentListeners=n,kn(e,n,h),u&&(e.$slots=Ht(i,o.context),e.$forceUpdate()),Sn=!1}(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,Nn(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,Mn.push(t)):En(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?In(t,!0):t.$destroy())}},vn=Object.keys(pn);function hn(e,t,n,s,u){if(!o(e)){var l=n.$options._base;if(c(e)&&(e=l.extend(e)),"function"==typeof e){var d;if(o(e.cid)&&(e=function(e,t){if(a(e.error)&&i(e.errorComp))return e.errorComp;if(i(e.resolved))return e.resolved;var n=bn;if(n&&i(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),a(e.loading)&&i(e.loadingComp))return e.loadingComp;if(n&&!i(e.owners)){var r=e.owners=[n],s=!0,u=null,l=null;n.$on("hook:destroyed",(function(){return b(r,n)}));var d=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==u&&(clearTimeout(u),u=null),null!==l&&(clearTimeout(l),l=null))},f=F((function(n){e.resolved=wn(n,t),s?r.length=0:d(!0)})),p=F((function(t){fe("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),i(e.errorComp)&&(e.error=!0,d(!0))})),h=e(f,p);return c(h)&&(v(h)?o(e.resolved)&&h.then(f,p):v(h.component)&&(h.component.then(f,p),i(h.error)&&(e.errorComp=wn(h.error,t)),i(h.loading)&&(e.loadingComp=wn(h.loading,t),0===h.delay?e.loading=!0:u=setTimeout((function(){u=null,o(e.resolved)&&o(e.error)&&(e.loading=!0,d(!1))}),h.delay||200)),i(h.timeout)&&(l=setTimeout((function(){l=null,o(e.resolved)&&p("timeout ("+h.timeout+"ms)")}),h.timeout)))),s=!1,e.loading?e.loadingComp:e.resolved}}(d=e,l),void 0===e))return function(e,t,n,r,o){var i=Ae();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:r,tag:o},i}(d,t,n,s,u);t=t||{},tr(e),i(t.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var o=t.on||(t.on={}),a=o[r],s=t.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[r]=[s].concat(a)):o[r]=s}(e.options,t);var f=function(e,t,n){var r=t.options.props;if(!o(r)){var a={},s=e.attrs,c=e.props;if(i(s)||i(c))for(var u in r){var l=S(u),d=u.toLowerCase();u!==d&&s&&$(s,d)&&pe('Prop "'+d+'" is passed to component '+ve(n||t)+', but the declared prop name is "'+u+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+u+'".'),Lt(a,c,u,l,!0)||Lt(a,s,u,l,!1)}return a}}(t,e,u);if(a(e.options.functional))return function(e,t,n,o,a){var s=e.options,c={},u=s.props;if(i(u))for(var l in u)c[l]=Ye(l,u,t||r);else i(n.attrs)&&fn(c,n.attrs),i(n.props)&&fn(c,n.props);var d=new ln(n,c,a,o,e),f=s.render.call(null,d._c,d);if(f instanceof Ce)return dn(f,n,d.parent,s,d);if(Array.isArray(f)){for(var p=Ft(f)||[],v=new Array(p.length),h=0;h<p.length;h++)v[h]=dn(p[h],n,d.parent,s,d);return v}}(e,f,t,n,s);var p=t.on;if(t.on=t.nativeOn,a(e.options.abstract)){var h=t.slot;t={},h&&(t.slot=h)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<vn.length;n++){var r=vn[n],o=t[r],i=pn[r];o===i||o&&o._merged||(t[r]=o?mn(i,o):i)}}(t);var m=e.options.name||u;return new Ce("vue-component-"+e.cid+(m?"-"+m:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:f,listeners:p,tag:u,children:s},d)}fe("Invalid Component definition: "+String(e),n)}}function mn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function yn(e,t,n,r,o,u){return(Array.isArray(n)||s(n))&&(o=r,r=n,n=void 0),a(u)&&(o=2),function(e,t,n,r,o){if(i(n)&&i(n.__ob__))return fe("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),Ae();if(i(n)&&i(n.is)&&(t=n.is),!t)return Ae();var a,u,l;(i(n)&&i(n.key)&&!s(n.key)&&fe("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0),2===o?r=Ft(r):1===o&&(r=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(r)),"string"==typeof t)?(u=e.$vnode&&e.$vnode.ns||H.getTagNamespace(t),H.isReservedTag(t)?(i(n)&&i(n.nativeOn)&&"component"!==n.tag&&fe("The .native modifier for v-on is only valid on components but it was used on <"+t+">.",e),a=new Ce(H.parsePlatformTagName(t),n,r,void 0,void 0,e)):a=n&&n.pre||!i(l=Xe(e.$options,"components",t))?new Ce(t,n,r,void 0,void 0,e):hn(l,n,e,r,t)):a=hn(t,n,e,r);return Array.isArray(a)?a:i(a)?(i(u)&&gn(a,u),i(n)&&function(e){c(e.style)&&Tt(e.style),c(e.class)&&Tt(e.class)}(n),a):Ae()}(e,t,n,r,o)}function gn(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),i(e.children))for(var r=0,s=e.children.length;r<s;r++){var c=e.children[r];i(c.tag)&&(o(c.ns)||a(n)&&"svg"!==c.tag)&&gn(c,t,n)}}var _n,bn=null;function wn(e,t){return(e.__esModule||de&&"Module"===e[Symbol.toStringTag])&&(e=e.default),c(e)?t.extend(e):e}function $n(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(i(n)&&(i(n.componentOptions)||zt(n)))return n}}function Cn(e,t){_n.$on(e,t)}function xn(e,t){_n.$off(e,t)}function An(e,t){var n=_n;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function kn(e,t,n){_n=e,Mt(t,n||{},Cn,xn,An,e),_n=void 0}var On=null,Sn=!1;function jn(e){var t=On;return On=e,function(){On=t}}function Tn(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function En(e,t){if(t){if(e._directInactive=!1,Tn(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)En(e.$children[n]);Nn(e,"activated")}}function In(e,t){if(!(t&&(e._directInactive=!0,Tn(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)In(e.$children[n]);Nn(e,"deactivated")}}function Nn(e,t){we();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,i=n.length;o<i;o++)at(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),$e()}var Pn=[],Mn=[],Dn={},Ln={},Fn=!1,Vn=!1,Rn=0,Un=0,Hn=Date.now;if(Y&&!Q){var Bn=window.performance;Bn&&"function"==typeof Bn.now&&Hn()>document.createEvent("Event").timeStamp&&(Hn=function(){return Bn.now()})}function zn(){var e,t;for(Un=Hn(),Vn=!0,Pn.sort((function(e,t){return e.id-t.id})),Rn=0;Rn<Pn.length;Rn++)if((e=Pn[Rn]).before&&e.before(),t=e.id,Dn[t]=null,e.run(),null!=Dn[t]&&(Ln[t]=(Ln[t]||0)+1,Ln[t]>100)){fe("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=Mn.slice(),r=Pn.slice();Rn=Pn.length=Mn.length=0,Dn={},Ln={},Fn=Vn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,En(e[t],!0)}(n),function(e){for(var t=e.length;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Nn(r,"updated")}}(r),ce&&H.devtools&&ce.emit("flush")}var qn=0,Wn=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++qn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new le,this.newDepIds=new le,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=function(e){if(!K.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=N,fe('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Wn.prototype.get=function(){var e;we(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;it(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Tt(e),$e(),this.cleanupDeps()}return e},Wn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Wn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Wn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Dn[t]){if(Dn[t]=!0,Vn){for(var n=Pn.length-1;n>Rn&&Pn[n].id>e.id;)n--;Pn.splice(n+1,0,e)}else Pn.push(e);if(!Fn){if(Fn=!0,!H.async)return void zn();_t(zn)}}}(this)},Wn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||c(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'+this.expression+'"';at(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},Wn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Wn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Wn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||b(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Kn={enumerable:!0,configurable:!0,get:N,set:N};function Xn(e,t,n){Kn.get=function(){return this[t][n]},Kn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Kn)}var Yn={lazy:!0};function Gn(e,t,n){var r=!se();"function"==typeof n?(Kn.get=r?Jn(t):Zn(n),Kn.set=N):(Kn.get=n.get?r&&!1!==n.cache?Jn(t):Zn(n.get):N,Kn.set=n.set||N),Kn.set===N&&(Kn.set=function(){fe('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Kn)}function Jn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),_e.target&&t.depend(),t.value}}function Zn(e){return function(){return e.call(this,this)}}function Qn(e,t,n,r){return d(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var er=0;function tr(e){var t=e.options;if(e.super){var n=tr(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}(e);r&&E(e.extendOptions,r),(t=e.options=Ke(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function nr(e){this instanceof nr||fe("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function rr(e){return e&&(e.Ctor.options.name||e.tag)}function or(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!f(e)&&e.test(t)}function ir(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var i in n){var a=n[i];if(a){var s=a.name;s&&!t(s)&&ar(n,i,r,o)}}}function ar(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,b(n,t)}!function(e){e.prototype._init=function(e){var t,n,o=this;o._uid=er++,H.performance&&Ot&&(t="vue-perf-start:"+o._uid,n="vue-perf-end:"+o._uid,Ot(t)),o._isVue=!0,e&&e._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(o,e):o.$options=Ke(tr(o.constructor),e||{},o),lt(o),o._self=o,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(o),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&kn(e,t)}(o),function(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,o=n&&n.context;e.$slots=Ht(t._renderChildren,o),e.$scopedSlots=r,e._c=function(t,n,r,o){return yn(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return yn(e,t,n,r,o,!0)};var i=n&&n.data;Me(e,"$attrs",i&&i.attrs||r,(function(){!Sn&&fe("$attrs is readonly.",e)}),!0),Me(e,"$listeners",t._parentListeners||r,(function(){!Sn&&fe("$listeners is readonly.",e)}),!0)}(o),Nn(o,"beforeCreate"),function(e){var t=Ut(e.$options.inject,e);t&&(Ie(!1),Object.keys(t).forEach((function(n){Me(e,n,t[n],(function(){fe('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),Ie(!0))}(o),function(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],i=!e.$parent;i||Ie(!1);var a=function(a){o.push(a);var s=Ye(a,t,n,e),c=S(a);(_(c)||H.isReservedAttr(c))&&fe('"'+c+'" is a reserved attribute and cannot be used as component prop.',e),Me(r,a,s,(function(){i||Sn||fe("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',e)})),a in e||Xn(e,"_props",a)};for(var s in t)a(s);Ie(!0)}(e,t.props),t.methods&&function(e,t){var n=e.$options.props;for(var r in t)"function"!=typeof t[r]&&fe('Method "'+r+'" has type "'+typeof t[r]+'" in the component definition. Did you reference the function correctly?',e),n&&$(n,r)&&fe('Method "'+r+'" has already been defined as a prop.',e),r in e&&z(r)&&fe('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!=typeof t[r]?N:j(t[r],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;d(t=e._data="function"==typeof t?function(e,t){we();try{return e.call(t,t)}catch(e){return it(e,t,"data()"),{}}finally{$e()}}(t,e):t||{})||(t={},fe("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,i=n.length;i--;){var a=n[i];o&&$(o,a)&&fe('Method "'+a+'" has already been defined as a data property.',e),r&&$(r,a)?fe('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',e):z(a)||Xn(e,"_data",a)}Pe(t,!0)}(e):Pe(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=se();for(var o in t){var i=t[o],a="function"==typeof i?i:i.get;null==a&&fe('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new Wn(e,a||N,N,Yn)),o in e?o in e.$data?fe('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props?fe('The computed property "'+o+'" is already defined as a prop.',e):e.$options.methods&&o in e.$options.methods&&fe('The computed property "'+o+'" is already defined as a method.',e):Gn(e,o,i)}}(e,t.computed),t.watch&&t.watch!==oe&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Qn(e,n,r[o]);else Qn(e,n,r)}}(e,t.watch)}(o),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(o),Nn(o,"created"),H.performance&&Ot&&(o._name=ve(o,!1),Ot(n),St("vue "+o._name+" init",t,n)),o.$options.el&&o.$mount(o.$options.el)}}(nr),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){fe("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){fe("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=De,e.prototype.$delete=Le,e.prototype.$watch=function(e,t,n){var r=this;if(d(t))return Qn(r,e,t,n);(n=n||{}).user=!0;var o=new Wn(r,e,t,n);if(n.immediate){var i='callback for immediate watcher "'+o.expression+'"';we(),at(t,r,[o.value],r,i),$e()}return function(){o.teardown()}}}(nr),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,i=e.length;o<i;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var i,a=n._events[e];if(!a)return n;if(!t)return n._events[e]=null,n;for(var s=a.length;s--;)if((i=a[s])===t||i.fn===t){a.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&pe('Event "'+n+'" is emitted in component '+ve(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+S(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?T(r):r;for(var o=T(arguments,1),i='event handler for "'+e+'"',a=0,s=r.length;a<s;a++)at(r[a],t,o,t,i)}return t}}(nr),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,i=jn(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Nn(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||b(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Nn(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(nr),function(e){un(e.prototype),e.prototype.$nextTick=function(e){return _t(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=qt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{bn=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){if(it(n,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,n)}catch(n){it(n,t,"renderError"),e=t._vnode}else e=t._vnode}finally{bn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof Ce||(Array.isArray(e)&&fe("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=Ae()),e.parent=o,e}}(nr);var sr=[String,RegExp,Array],cr={name:"keep-alive",abstract:!0,props:{include:sr,exclude:sr,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,n=e.keys,r=e.vnodeToCache,o=e.keyToCache;if(r){var i=r.tag,a=r.componentInstance,s=r.componentOptions;t[o]={name:rr(s),tag:i,componentInstance:a},n.push(o),this.max&&n.length>parseInt(this.max)&&ar(t,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)ar(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){ir(e,(function(e){return or(t,e)}))})),this.$watch("exclude",(function(t){ir(e,(function(e){return!or(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=$n(e),n=t&&t.componentOptions;if(n){var r=rr(n),o=this.include,i=this.exclude;if(o&&(!r||!or(o,r))||i&&r&&or(i,r))return t;var a=this.cache,s=this.keys,c=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;a[c]?(t.componentInstance=a[c].componentInstance,b(s,c),s.push(c)):(this.vnodeToCache=t,this.keyToCache=c),t.data.keepAlive=!0}return t||e&&e[0]}},ur={KeepAlive:cr};!function(e){var t={get:function(){return H},set:function(){fe("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:fe,extend:E,mergeOptions:Ke,defineReactive:Me},e.set=De,e.delete=Le,e.nextTick=_t,e.observable=function(e){return Pe(e),e},e.options=Object.create(null),R.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,E(e.options.components,ur),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=T(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Ke(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var i=e.name||n.options.name;i&&qe(i);var a=function(e){this._init(e)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=t++,a.options=Ke(n.options,e),a.super=n,a.options.props&&function(e){var t=e.options.props;for(var n in t)Xn(e.prototype,"_props",n)}(a),a.options.computed&&function(e){var t=e.options.computed;for(var n in t)Gn(e.prototype,n,t[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,R.forEach((function(e){a[e]=n[e]})),i&&(a.options.components[i]=a),a.superOptions=n.options,a.extendOptions=e,a.sealedOptions=E({},a.options),o[r]=a,a}}(e),function(e){R.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&qe(e),"component"===t&&d(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(nr),Object.defineProperty(nr.prototype,"$isServer",{get:se}),Object.defineProperty(nr.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(nr,"FunctionalRenderContext",{value:ln}),nr.version="2.6.14";var lr=y("style,class"),dr=y("input,textarea,option,select,progress"),fr=y("contenteditable,draggable,spellcheck"),pr=y("events,caret,typing,plaintext-only"),vr=y("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),hr="http://www.w3.org/1999/xlink",mr=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},yr=function(e){return mr(e)?e.slice(6,e.length):""},gr=function(e){return null==e||!1===e};function _r(e,t){return{staticClass:br(e.staticClass,t.staticClass),class:i(e.class)?[e.class,t.class]:t.class}}function br(e,t){return e?t?e+" "+t:e:t||""}function wr(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,o=e.length;r<o;r++)i(t=wr(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):c(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var $r={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Cr=y("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),xr=y("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ar=function(e){return Cr(e)||xr(e)},kr=Object.create(null),Or=y("text,number,password,search,email,tel,url"),Sr=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS($r[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),jr={create:function(e,t){Tr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Tr(e,!0),Tr(t))},destroy:function(e){Tr(e,!0)}};function Tr(e,t){var n=e.data.ref;if(i(n)){var r=e.context,o=e.componentInstance||e.elm,a=r.$refs;t?Array.isArray(a[n])?b(a[n],o):a[n]===o&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var Er=new Ce("",{},[]),Ir=["create","activate","update","remove","destroy"];function Nr(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&i(e.data)===i(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=i(n=e.data)&&i(n=n.attrs)&&n.type,o=i(n=t.data)&&i(n=n.attrs)&&n.type;return r===o||Or(r)&&Or(o)}(e,t)||a(e.isAsyncPlaceholder)&&o(t.asyncFactory.error))}function Pr(e,t,n){var r,o,a={};for(r=t;r<=n;++r)i(o=e[r].key)&&(a[o]=r);return a}var Mr={create:Dr,update:Dr,destroy:function(e){Dr(e,Er)}};function Dr(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,o,i=e===Er,a=t===Er,s=Fr(e.data.directives,e.context),c=Fr(t.data.directives,t.context),u=[],l=[];for(n in c)r=s[n],o=c[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Rr(o,"update",t,e),o.def&&o.def.componentUpdated&&l.push(o)):(Rr(o,"bind",t,e),o.def&&o.def.inserted&&u.push(o));if(u.length){var d=function(){for(var n=0;n<u.length;n++)Rr(u[n],"inserted",t,e)};i?Dt(t,"insert",d):d()}if(l.length&&Dt(t,"postpatch",(function(){for(var n=0;n<l.length;n++)Rr(l[n],"componentUpdated",t,e)})),!i)for(n in s)c[n]||Rr(s[n],"unbind",e,e,a)}(e,t)}var Lr=Object.create(null);function Fr(e,t){var n,r,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=Lr),o[Vr(r)]=r,r.def=Xe(t.$options,"directives",r.name,!0);return o}function Vr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Rr(e,t,n,r,o){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,r,o)}catch(r){it(r,n.context,"directive "+e.name+" "+t+" hook")}}var Ur=[jr,Mr];function Hr(e,t){var n=t.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||o(e.data.attrs)&&o(t.data.attrs))){var r,a,s=t.elm,c=e.data.attrs||{},u=t.data.attrs||{};for(r in i(u.__ob__)&&(u=t.data.attrs=E({},u)),u)a=u[r],c[r]!==a&&Br(s,r,a,t.data.pre);for(r in(Q||te)&&u.value!==c.value&&Br(s,"value",u.value),c)o(u[r])&&(mr(r)?s.removeAttributeNS(hr,yr(r)):fr(r)||s.removeAttribute(r))}}function Br(e,t,n,r){r||e.tagName.indexOf("-")>-1?zr(e,t,n):vr(t)?gr(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):fr(t)?e.setAttribute(t,function(e,t){return gr(t)||"false"===t?"false":"contenteditable"===e&&pr(t)?t:"true"}(t,n)):mr(t)?gr(n)?e.removeAttributeNS(hr,yr(t)):e.setAttributeNS(hr,t,n):zr(e,t,n)}function zr(e,t,n){if(gr(n))e.removeAttribute(t);else{if(Q&&!ee&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var qr={create:Hr,update:Hr};function Wr(e,t){var n=t.elm,r=t.data,a=e.data;if(!(o(r.staticClass)&&o(r.class)&&(o(a)||o(a.staticClass)&&o(a.class)))){var s=function(e){for(var t=e.data,n=e,r=e;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=_r(r.data,t));for(;i(n=n.parent);)n&&n.data&&(t=_r(t,n.data));return o=t.staticClass,a=t.class,i(o)||i(a)?br(o,wr(a)):"";var o,a}(t),c=n._transitionClasses;i(c)&&(s=br(s,wr(c))),s!==n._prevClass&&(n.setAttribute("class",s),n._prevClass=s)}}var Kr,Xr={create:Wr,update:Wr};function Yr(e,t,n){var r=Kr;return function o(){var i=t.apply(null,arguments);null!==i&&Zr(e,o,n,r)}}var Gr=dt&&!(re&&Number(re[1])<=53);function Jr(e,t,n,r){if(Gr){var o=Un,i=t;t=i._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return i.apply(this,arguments)}}Kr.addEventListener(e,t,ie?{capture:n,passive:r}:n)}function Zr(e,t,n,r){(r||Kr).removeEventListener(e,t._wrapper||t,n)}function Qr(e,t){if(!o(e.data.on)||!o(t.data.on)){var n=t.data.on||{},r=e.data.on||{};Kr=t.elm,function(e){if(i(e.__r)){var t=Q?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}i(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),Mt(n,r,Jr,Zr,Yr,t.context),Kr=void 0}}var eo,to={create:Qr,update:Qr};function no(e,t){if(!o(e.data.domProps)||!o(t.data.domProps)){var n,r,a=t.elm,s=e.data.domProps||{},c=t.data.domProps||{};for(n in i(c.__ob__)&&(c=t.data.domProps=E({},c)),s)n in c||(a[n]="");for(n in c){if(r=c[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===s[n])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===n&&"PROGRESS"!==a.tagName){a._value=r;var u=o(r)?"":String(r);ro(a,u)&&(a.value=u)}else if("innerHTML"===n&&xr(a.tagName)&&o(a.innerHTML)){(eo=eo||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=eo.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(r!==s[n])try{a[n]=r}catch(e){}}}}function ro(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(i(r)){if(r.number)return m(n)!==m(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var oo={create:no,update:no},io=C((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function ao(e){var t=so(e.style);return e.staticStyle?E(e.staticStyle,t):t}function so(e){return Array.isArray(e)?I(e):"string"==typeof e?io(e):e}var co,uo=/^--/,lo=/\s*!important$/,fo=function(e,t,n){if(uo.test(t))e.style.setProperty(t,n);else if(lo.test(n))e.style.setProperty(S(t),n.replace(lo,""),"important");else{var r=vo(t);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)e.style[r]=n[o];else e.style[r]=n}},po=["Webkit","Moz","ms"],vo=C((function(e){if(co=co||document.createElement("div").style,"filter"!==(e=A(e))&&e in co)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<po.length;n++){var r=po[n]+t;if(r in co)return r}}));function ho(e,t){var n=t.data,r=e.data;if(!(o(n.staticStyle)&&o(n.style)&&o(r.staticStyle)&&o(r.style))){var a,s,c=t.elm,u=r.staticStyle,l=r.normalizedStyle||r.style||{},d=u||l,f=so(t.data.style)||{};t.data.normalizedStyle=i(f.__ob__)?E({},f):f;var p=function(e,t){for(var n,r={},o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=ao(o.data))&&E(r,n);(n=ao(e.data))&&E(r,n);for(var i=e;i=i.parent;)i.data&&(n=ao(i.data))&&E(r,n);return r}(t);for(s in d)o(p[s])&&fo(c,s,"");for(s in p)(a=p[s])!==d[s]&&fo(c,s,null==a?"":a)}}var mo={create:ho,update:ho},yo=/\s+/;function go(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(yo).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function _o(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(yo).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function bo(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&E(t,wo(e.name||"v")),E(t,e),t}return"string"==typeof e?wo(e):void 0}}var wo=C((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),$o=Y&&!ee,Co="transition",xo="animation",Ao="transition",ko="transitionend",Oo="animation",So="animationend";$o&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Ao="WebkitTransition",ko="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Oo="WebkitAnimation",So="webkitAnimationEnd"));var jo=Y?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function To(e){jo((function(){jo(e)}))}function Eo(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),go(e,t))}function Io(e,t){e._transitionClasses&&b(e._transitionClasses,t),_o(e,t)}function No(e,t,n){var r=Mo(e,t),o=r.type,i=r.timeout,a=r.propCount;if(!o)return n();var s=o===Co?ko:So,c=0,u=function(){e.removeEventListener(s,l),n()},l=function(t){t.target===e&&++c>=a&&u()};setTimeout((function(){c<a&&u()}),i+1),e.addEventListener(s,l)}var Po=/\b(transform|all)(,|$)/;function Mo(e,t){var n,r=window.getComputedStyle(e),o=(r[Ao+"Delay"]||"").split(", "),i=(r[Ao+"Duration"]||"").split(", "),a=Do(o,i),s=(r[Oo+"Delay"]||"").split(", "),c=(r[Oo+"Duration"]||"").split(", "),u=Do(s,c),l=0,d=0;return t===Co?a>0&&(n=Co,l=a,d=i.length):t===xo?u>0&&(n=xo,l=u,d=c.length):d=(n=(l=Math.max(a,u))>0?a>u?Co:xo:null)?n===Co?i.length:c.length:0,{type:n,timeout:l,propCount:d,hasTransform:n===Co&&Po.test(r[Ao+"Property"])}}function Do(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return Lo(t)+Lo(e[n])})))}function Lo(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function Fo(e,t){var n=e.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=bo(e.data.transition);if(!o(r)&&!i(n._enterCb)&&1===n.nodeType){for(var a=r.css,s=r.type,u=r.enterClass,l=r.enterToClass,d=r.enterActiveClass,f=r.appearClass,p=r.appearToClass,v=r.appearActiveClass,h=r.beforeEnter,y=r.enter,g=r.afterEnter,_=r.enterCancelled,b=r.beforeAppear,w=r.appear,$=r.afterAppear,C=r.appearCancelled,x=r.duration,A=On,k=On.$vnode;k&&k.parent;)A=k.context,k=k.parent;var O=!A._isMounted||!e.isRootInsert;if(!O||w||""===w){var S=O&&f?f:u,j=O&&v?v:d,T=O&&p?p:l,E=O&&b||h,I=O&&"function"==typeof w?w:y,N=O&&$||g,P=O&&C||_,M=m(c(x)?x.enter:x);null!=M&&Ro(M,"enter",e);var D=!1!==a&&!ee,L=Ho(I),V=n._enterCb=F((function(){D&&(Io(n,T),Io(n,j)),V.cancelled?(D&&Io(n,S),P&&P(n)):N&&N(n),n._enterCb=null}));e.data.show||Dt(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),I&&I(n,V)})),E&&E(n),D&&(Eo(n,S),Eo(n,j),To((function(){Io(n,S),V.cancelled||(Eo(n,T),L||(Uo(M)?setTimeout(V,M):No(n,s,V)))}))),e.data.show&&(t&&t(),I&&I(n,V)),D||L||V()}}}function Vo(e,t){var n=e.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=bo(e.data.transition);if(o(r)||1!==n.nodeType)return t();if(!i(n._leaveCb)){var a=r.css,s=r.type,u=r.leaveClass,l=r.leaveToClass,d=r.leaveActiveClass,f=r.beforeLeave,p=r.leave,v=r.afterLeave,h=r.leaveCancelled,y=r.delayLeave,g=r.duration,_=!1!==a&&!ee,b=Ho(p),w=m(c(g)?g.leave:g);i(w)&&Ro(w,"leave",e);var $=n._leaveCb=F((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),_&&(Io(n,l),Io(n,d)),$.cancelled?(_&&Io(n,u),h&&h(n)):(t(),v&&v(n)),n._leaveCb=null}));y?y(C):C()}function C(){$.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),f&&f(n),_&&(Eo(n,u),Eo(n,d),To((function(){Io(n,u),$.cancelled||(Eo(n,l),b||(Uo(w)?setTimeout($,w):No(n,s,$)))}))),p&&p(n,$),_||b||$())}}function Ro(e,t,n){"number"!=typeof e?fe("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&fe("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function Uo(e){return"number"==typeof e&&!isNaN(e)}function Ho(e){if(o(e))return!1;var t=e.fns;return i(t)?Ho(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function Bo(e,t){!0!==t.data.show&&Fo(t)}var zo=function(e){var t,n,r={},c=e.modules,u=e.nodeOps;for(t=0;t<Ir.length;++t)for(r[Ir[t]]=[],n=0;n<c.length;++n)i(c[n][Ir[t]])&&r[Ir[t]].push(c[n][Ir[t]]);function l(e){var t=u.parentNode(e);i(t)&&u.removeChild(t,e)}function d(e,t){return!t&&!e.ns&&!(H.ignoredElements.length&&H.ignoredElements.some((function(t){return f(t)?t.test(e.tag):t===e.tag})))&&H.isUnknownElement(e.tag)}var p=0;function v(e,t,n,o,s,c,l){if(i(e.elm)&&i(c)&&(e=c[l]=Oe(e)),e.isRootInsert=!s,!function(e,t,n,o){var s=e.data;if(i(s)){var c=i(e.componentInstance)&&s.keepAlive;if(i(s=s.hook)&&i(s=s.init)&&s(e,!1),i(e.componentInstance))return h(e,t),m(n,e.elm,o),a(c)&&function(e,t,n,o){for(var a,s=e;s.componentInstance;)if(i(a=(s=s.componentInstance._vnode).data)&&i(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Er,s);t.push(s);break}m(n,e.elm,o)}(e,t,n,o),!0}}(e,t,n,o)){var f=e.data,v=e.children,y=e.tag;i(y)?(f&&f.pre&&p++,d(e,p)&&fe("Unknown custom element: <"+y+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?u.createElementNS(e.ns,y):u.createElement(y,e),w(e),g(e,v,t),i(f)&&b(e,t),m(n,e.elm,o),f&&f.pre&&p--):a(e.isComment)?(e.elm=u.createComment(e.text),m(n,e.elm,o)):(e.elm=u.createTextNode(e.text),m(n,e.elm,o))}}function h(e,t){i(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,_(e)?(b(e,t),w(e)):(Tr(e),t.push(e))}function m(e,t,n){i(e)&&(i(n)?u.parentNode(n)===e&&u.insertBefore(e,t,n):u.appendChild(e,t))}function g(e,t,n){if(Array.isArray(t)){k(t);for(var r=0;r<t.length;++r)v(t[r],n,e.elm,null,!0,t,r)}else s(e.text)&&u.appendChild(e.elm,u.createTextNode(String(e.text)))}function _(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return i(e.tag)}function b(e,n){for(var o=0;o<r.create.length;++o)r.create[o](Er,e);i(t=e.data.hook)&&(i(t.create)&&t.create(Er,e),i(t.insert)&&n.push(e))}function w(e){var t;if(i(t=e.fnScopeId))u.setStyleScope(e.elm,t);else for(var n=e;n;)i(t=n.context)&&i(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t),n=n.parent;i(t=On)&&t!==e.context&&t!==e.fnContext&&i(t=t.$options._scopeId)&&u.setStyleScope(e.elm,t)}function $(e,t,n,r,o,i){for(;r<=o;++r)v(n[r],i,e,t,!1,n,r)}function C(e){var t,n,o=e.data;if(i(o))for(i(t=o.hook)&&i(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(i(t=e.children))for(n=0;n<e.children.length;++n)C(e.children[n])}function x(e,t,n){for(;t<=n;++t){var r=e[t];i(r)&&(i(r.tag)?(A(r),C(r)):l(r.elm))}}function A(e,t){if(i(t)||i(e.data)){var n,o=r.remove.length+1;for(i(t)?t.listeners+=o:t=function(e,t){function n(){0==--n.listeners&&l(e)}return n.listeners=t,n}(e.elm,o),i(n=e.componentInstance)&&i(n=n._vnode)&&i(n.data)&&A(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);i(n=e.data.hook)&&i(n=n.remove)?n(e,t):t()}else l(e.elm)}function k(e){for(var t={},n=0;n<e.length;n++){var r=e[n],o=r.key;i(o)&&(t[o]?fe("Duplicate keys detected: '"+o+"'. This may cause an update error.",r.context):t[o]=!0)}}function O(e,t,n,r){for(var o=n;o<r;o++){var a=t[o];if(i(a)&&Nr(e,a))return o}}function S(e,t,n,s,c,l){if(e!==t){i(t.elm)&&i(s)&&(t=s[c]=Oe(t));var d=t.elm=e.elm;if(a(e.isAsyncPlaceholder))i(t.asyncFactory.resolved)?I(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(a(t.isStatic)&&a(e.isStatic)&&t.key===e.key&&(a(t.isCloned)||a(t.isOnce)))t.componentInstance=e.componentInstance;else{var f,p=t.data;i(p)&&i(f=p.hook)&&i(f=f.prepatch)&&f(e,t);var h=e.children,m=t.children;if(i(p)&&_(t)){for(f=0;f<r.update.length;++f)r.update[f](e,t);i(f=p.hook)&&i(f=f.update)&&f(e,t)}o(t.text)?i(h)&&i(m)?h!==m&&function(e,t,n,r,a){var s,c,l,d=0,f=0,p=t.length-1,h=t[0],m=t[p],y=n.length-1,g=n[0],_=n[y],b=!a;for(k(n);d<=p&&f<=y;)o(h)?h=t[++d]:o(m)?m=t[--p]:Nr(h,g)?(S(h,g,r,n,f),h=t[++d],g=n[++f]):Nr(m,_)?(S(m,_,r,n,y),m=t[--p],_=n[--y]):Nr(h,_)?(S(h,_,r,n,y),b&&u.insertBefore(e,h.elm,u.nextSibling(m.elm)),h=t[++d],_=n[--y]):Nr(m,g)?(S(m,g,r,n,f),b&&u.insertBefore(e,m.elm,h.elm),m=t[--p],g=n[++f]):(o(s)&&(s=Pr(t,d,p)),o(c=i(g.key)?s[g.key]:O(g,t,d,p))?v(g,r,e,h.elm,!1,n,f):Nr(l=t[c],g)?(S(l,g,r,n,f),t[c]=void 0,b&&u.insertBefore(e,l.elm,h.elm)):v(g,r,e,h.elm,!1,n,f),g=n[++f]);d>p?$(e,o(n[y+1])?null:n[y+1].elm,n,f,y,r):f>y&&x(t,d,p)}(d,h,m,n,l):i(m)?(k(m),i(e.text)&&u.setTextContent(d,""),$(d,null,m,0,m.length-1,n)):i(h)?x(h,0,h.length-1):i(e.text)&&u.setTextContent(d,""):e.text!==t.text&&u.setTextContent(d,t.text),i(p)&&i(f=p.hook)&&i(f=f.postpatch)&&f(e,t)}}}function j(e,t,n){if(a(n)&&i(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var T=!1,E=y("attrs,class,staticClass,staticStyle,key");function I(e,t,n,r){var o,s=t.tag,c=t.data,u=t.children;if(r=r||c&&c.pre,t.elm=e,a(t.isComment)&&i(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,n){return i(t.tag)?0===t.tag.indexOf("vue-component")||!d(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,r))return!1;if(i(c)&&(i(o=c.hook)&&i(o=o.init)&&o(t,!0),i(o=t.componentInstance)))return h(t,n),!0;if(i(s)){if(i(u))if(e.hasChildNodes())if(i(o=c)&&i(o=o.domProps)&&i(o=o.innerHTML)){if(o!==e.innerHTML)return"undefined"==typeof console||T||(T=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",o),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var l=!0,f=e.firstChild,p=0;p<u.length;p++){if(!f||!I(f,u[p],n,r)){l=!1;break}f=f.nextSibling}if(!l||f)return"undefined"==typeof console||T||(T=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,u)),!1}else g(t,u,n);if(i(c)){var v=!1;for(var m in c)if(!E(m)){v=!0,b(t,n);break}!v&&c.class&&Tt(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!o(t)){var c,l=!1,d=[];if(o(e))l=!0,v(t,d);else{var f=i(e.nodeType);if(!f&&Nr(e,t))S(e,t,d,null,null,s);else{if(f){if(1===e.nodeType&&e.hasAttribute(V)&&(e.removeAttribute(V),n=!0),a(n)){if(I(e,t,d))return j(t,d,!0),e;fe("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}c=e,e=new Ce(u.tagName(c).toLowerCase(),{},[],void 0,c)}var p=e.elm,h=u.parentNode(p);if(v(t,d,p._leaveCb?null:h,u.nextSibling(p)),i(t.parent))for(var m=t.parent,y=_(t);m;){for(var g=0;g<r.destroy.length;++g)r.destroy[g](m);if(m.elm=t.elm,y){for(var b=0;b<r.create.length;++b)r.create[b](Er,m);var w=m.data.hook.insert;if(w.merged)for(var $=1;$<w.fns.length;$++)w.fns[$]()}else Tr(m);m=m.parent}i(h)?x([e],0,0):i(e.tag)&&C(e)}}return j(t,d,l),t.elm}i(e)&&C(e)}}({nodeOps:Sr,modules:[qr,Xr,to,oo,mo,Y?{create:Bo,activate:Bo,remove:function(e,t){!0!==e.data.show?Vo(e,t):t()}}:{}].concat(Ur)});ee&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Zo(e,"input")}));var qo={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Dt(n,"postpatch",(function(){qo.componentUpdated(e,t,n)})):Wo(e,t,n.context),e._vOptions=[].map.call(e.options,Yo)):("textarea"===n.tag||Or(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",Go),e.addEventListener("compositionend",Jo),e.addEventListener("change",Jo),ee&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){Wo(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,Yo);o.some((function(e,t){return!D(e,r[t])}))&&(e.multiple?t.value.some((function(e){return Xo(e,o)})):t.value!==t.oldValue&&Xo(t.value,o))&&Zo(e,"change")}}};function Wo(e,t,n){Ko(e,t,n),(Q||te)&&setTimeout((function(){Ko(e,t,n)}),0)}function Ko(e,t,n){var r=t.value,o=e.multiple;if(!o||Array.isArray(r)){for(var i,a,s=0,c=e.options.length;s<c;s++)if(a=e.options[s],o)i=L(r,Yo(a))>-1,a.selected!==i&&(a.selected=i);else if(D(Yo(a),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));o||(e.selectedIndex=-1)}else fe('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function Xo(e,t){return t.every((function(t){return!D(t,e)}))}function Yo(e){return"_value"in e?e._value:e.value}function Go(e){e.target.composing=!0}function Jo(e){e.target.composing&&(e.target.composing=!1,Zo(e.target,"input"))}function Zo(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Qo(e){return!e.componentInstance||e.data&&e.data.transition?e:Qo(e.componentInstance._vnode)}var ei={bind:function(e,t,n){var r=t.value,o=(n=Qo(n)).data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,Fo(n,(function(){e.style.display=i}))):e.style.display=r?i:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=Qo(n)).data&&n.data.transition?(n.data.show=!0,r?Fo(n,(function(){e.style.display=e.__vOriginalDisplay})):Vo(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}},ti={model:qo,show:ei},ni={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ri(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?ri($n(t.children)):e}function oi(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var i in o)t[A(i)]=o[i];return t}function ii(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var ai=function(e){return e.tag||zt(e)},si=function(e){return"show"===e.name},ci={name:"transition",props:ni,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(ai)).length){n.length>1&&fe("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&fe("invalid <transition> mode: "+r,this.$parent);var o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var i=ri(o);if(!i)return o;if(this._leaving)return ii(e,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=oi(this),u=this._vnode,l=ri(u);if(i.data.directives&&i.data.directives.some(si)&&(i.data.show=!0),l&&l.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(i,l)&&!zt(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var d=l.data.transition=E({},c);if("out-in"===r)return this._leaving=!0,Dt(d,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),ii(e,o);if("in-out"===r){if(zt(i))return u;var f,p=function(){f()};Dt(c,"afterEnter",p),Dt(c,"enterCancelled",p),Dt(d,"delayLeave",(function(e){f=e}))}}return o}}},ui=E({tag:String,moveClass:String},ni);delete ui.mode;var li={props:ui,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var o=jn(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],a=oi(this),s=0;s<o.length;s++){var c=o[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=a;else{var u=c.componentOptions,l=u?u.Ctor.options.name||u.tag||"":c.tag;fe("<transition-group> children must be keyed: <"+l+">")}}if(r){for(var d=[],f=[],p=0;p<r.length;p++){var v=r[p];v.data.transition=a,v.data.pos=v.elm.getBoundingClientRect(),n[v.key]?d.push(v):f.push(v)}this.kept=e(t,null,d),this.removed=f}return e(t,null,i)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(di),e.forEach(fi),e.forEach(pi),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;Eo(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ko,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ko,e),n._moveCb=null,Io(n,t))})}})))},methods:{hasMove:function(e,t){if(!$o)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){_o(n,e)})),go(n,t),n.style.display="none",this.$el.appendChild(n);var r=Mo(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function di(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function fi(e){e.data.newPos=e.elm.getBoundingClientRect()}function pi(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}var vi={Transition:ci,TransitionGroup:li};nr.config.mustUseProp=function(e,t,n){return"value"===n&&dr(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},nr.config.isReservedTag=Ar,nr.config.isReservedAttr=lr,nr.config.getTagNamespace=function(e){return xr(e)?"svg":"math"===e?"math":void 0},nr.config.isUnknownElement=function(e){if(!Y)return!0;if(Ar(e))return!1;if(e=e.toLowerCase(),null!=kr[e])return kr[e];var t=document.createElement(e);return e.indexOf("-")>-1?kr[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:kr[e]=/HTMLUnknownElement/.test(t.toString())},E(nr.options.directives,ti),E(nr.options.components,vi),nr.prototype.__patch__=Y?zo:N,nr.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=Ae,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?fe("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):fe("Failed to mount component: template or render function not defined.",e)),Nn(e,"beforeMount"),r=H.performance&&Ot?function(){var t=e._name,r=e._uid,o="vue-perf-start:"+r,i="vue-perf-end:"+r;Ot(o);var a=e._render();Ot(i),St("vue "+t+" render",o,i),Ot(o),e._update(a,n),Ot(i),St("vue "+t+" patch",o,i)}:function(){e._update(e._render(),n)},new Wn(e,r,N,{before:function(){e._isMounted&&!e._isDestroyed&&Nn(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,Nn(e,"mounted")),e}(this,e=e&&Y?function(e){return"string"==typeof e?document.querySelector(e)||(fe("Cannot find element: "+e),document.createElement("div")):e}(e):void 0,t)},Y&&setTimeout((function(){H.devtools&&(ce?ce.emit("init",nr):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==H.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")}),0);const hi=nr}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var r={};(()=>{"use strict";n.r(r);var e=n("./node_modules/vue/dist/vue.runtime.esm.js"),t=n("./public/js/somevuepage/components/SomeVuePage.vue");new e.default({el:"#vueexample",render:e=>e(t.default)})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixLQUNqQyxJQUFJLElBQUkzd0IsS0FBTzJ3QixFQUNYeVosRUFBb0IxRSxFQUFFL1UsRUFBWTN3QixLQUFTb3FDLEVBQW9CMUUsRUFBRWxwQyxFQUFTd0QsSUFDNUV0RCxPQUFPa0ksZUFBZXBJLEVBQVN3RCxFQUFLLENBQUUyRSxZQUFZLEVBQU00QixJQUFLb3FCLEVBQVczd0IsTUNKM0VvcUMsRUFBb0J6akMsRUFBSSxXQUN2QixHQUEwQixpQkFBZjhqQyxXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU90d0MsTUFBUSxJQUFJNEcsU0FBUyxjQUFiLEdBQ2QsTUFBTzBCLEdBQ1IsR0FBc0IsaUJBQVgyQyxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QmdsQyxFQUFvQjFFLEVBQUksQ0FBQ3ZvQyxFQUFLc1UsSUFBVS9VLE9BQU9XLFVBQVV5QyxlQUFlbkUsS0FBS3dCLEVBQUtzVSxHQ0NsRjI0QixFQUFvQk0sRUFBS2x1QyxJQUNILG9CQUFYMkssUUFBMEJBLE9BQU91ZSxhQUMxQ2hwQixPQUFPa0ksZUFBZXBJLEVBQVMySyxPQUFPdWUsWUFBYSxDQUFFem9CLE1BQU8sV0FFN0RQLE9BQU9rSSxlQUFlcEksRUFBUyxhQUFjLENBQUVTLE9BQU8sd0pDRHZELElBQUksVUFBSSxDQUNKdVMsR0FBSSxjQUNKNVYsT0FBUXdDLEdBQUtBLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWVleGFtcGxlLy4vcHVibGljL2pzL3NvbWV2dWVwYWdlL2NvbXBvbmVudHMvU29tZVZ1ZVBhZ2UudnVlIiwid2VicGFjazovL3Z1ZWV4YW1wbGUvcHVibGljL2pzL3NvbWV2dWVwYWdlL2NvbXBvbmVudHMvU29tZVZ1ZVBhZ2UudnVlIiwid2VicGFjazovL3Z1ZWV4YW1wbGUvLi9wdWJsaWMvanMvc29tZXZ1ZXBhZ2UvY29tcG9uZW50cy9Tb21lVnVlUGFnZS52dWU/MWFlMSIsIndlYnBhY2s6Ly92dWVleGFtcGxlLy4vcHVibGljL2pzL3NvbWV2dWVwYWdlL2NvbXBvbmVudHMvU29tZVZ1ZVBhZ2UudnVlP2NkNTYiLCJ3ZWJwYWNrOi8vdnVlZXhhbXBsZS8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vdnVlZXhhbXBsZS8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20uanMiLCJ3ZWJwYWNrOi8vdnVlZXhhbXBsZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly92dWVleGFtcGxlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly92dWVleGFtcGxlL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdnVlZXhhbXBsZS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Z1ZWV4YW1wbGUvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly92dWVleGFtcGxlLy4vcHVibGljL2pzL3NvbWV2dWVwYWdlL3NvbWV2dWVwYWdlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vU29tZVZ1ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWJjY2IxMWI4JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1NvbWVWdWVQYWdlLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vU29tZVZ1ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvcnlhbmhvbHQvU2l0ZXMvd3B2dWUvd3AtY29udGVudC9wbHVnaW5zL3Z1ZWV4YW1wbGUvbm9kZV9tb2R1bGVzL3Z1ZS1ob3QtcmVsb2FkLWFwaS9kaXN0L2luZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnYmNjYjExYjgnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnYmNjYjExYjgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnYmNjYjExYjgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1NvbWVWdWVQYWdlLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iY2NiMTFiOCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdiY2NiMTFiOCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicHVibGljL2pzL3NvbWV2dWVwYWdlL2NvbXBvbmVudHMvU29tZVZ1ZVBhZ2UudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxuICAgIDxkaXY+XG4gICAgICAgIDxoMj5NZWF0IGFuZCB7eyBwb3RhdG9lcyB9fTwvaDI+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb3RhdG9lczogXCJQb3RhdG9lc1wiXG4gICAgICAgIH1cbiAgICB9XG59XG48L3NjcmlwdD4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU29tZVZ1ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU29tZVZ1ZVBhZ2UudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW19jKFwiaDJcIiwgW192bS5fdihcIk1lYXQgYW5kIFwiICsgX3ZtLl9zKF92bS5wb3RhdG9lcykpXSldKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xuXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXG4vLyBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgd2VicGFjayB1c2VyIGJ1bmRsZS5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcbiAgc2NyaXB0RXhwb3J0cyxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZ1bmN0aW9uYWxUZW1wbGF0ZSxcbiAgaW5qZWN0U3R5bGVzLFxuICBzY29wZUlkLFxuICBtb2R1bGVJZGVudGlmaWVyLCAvKiBzZXJ2ZXIgb25seSAqL1xuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICAob3B0aW9ucy5mdW5jdGlvbmFsID8gdGhpcy5wYXJlbnQgOiB0aGlzKS4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290XG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjE0XG4gKiAoYykgMjAxNC0yMDIxIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG52YXIgZW1wdHlPYmplY3QgPSBPYmplY3QuZnJlZXplKHt9KTtcblxuLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4vLyBleHBsaWNpdG5lc3MgYW5kIGZ1bmN0aW9uIGlubGluaW5nLlxuZnVuY3Rpb24gaXNVbmRlZiAodikge1xuICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNEZWYgKHYpIHtcbiAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzVHJ1ZSAodikge1xuICByZXR1cm4gdiA9PT0gdHJ1ZVxufVxuXG5mdW5jdGlvbiBpc0ZhbHNlICh2KSB7XG4gIHJldHVybiB2ID09PSBmYWxzZVxufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAqL1xuZnVuY3Rpb24gaXNQcmltaXRpdmUgKHZhbHVlKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHxcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzeW1ib2wnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbidcbiAgKVxufVxuXG4vKipcbiAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICogT2JqZWN0cyBmcm9tIHByaW1pdGl2ZSB2YWx1ZXMgd2hlbiB3ZSBrbm93IHRoZSB2YWx1ZVxuICogaXMgYSBKU09OLWNvbXBsaWFudCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuLyoqXG4gKiBHZXQgdGhlIHJhdyB0eXBlIHN0cmluZyBvZiBhIHZhbHVlLCBlLmcuLCBbb2JqZWN0IE9iamVjdF0uXG4gKi9cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiB0b1Jhd1R5cGUgKHZhbHVlKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG59XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJ1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodikgPT09ICdbb2JqZWN0IFJlZ0V4cF0nXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsIGlzIGEgdmFsaWQgYXJyYXkgaW5kZXguXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgdmFyIG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdCh2YWwpO1xuICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG59XG5cbi8qKlxuICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gKiBpcyBpbiB0aGF0IG1hcC5cbiAqL1xuZnVuY3Rpb24gbWFrZU1hcCAoXG4gIHN0cixcbiAgZXhwZWN0c0xvd2VyQ2FzZVxuKSB7XG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsLnRvTG93ZXJDYXNlKCldOyB9XG4gICAgOiBmdW5jdGlvbiAodmFsKSB7IHJldHVybiBtYXBbdmFsXTsgfVxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgdGFnIGlzIGEgYnVpbHQtaW4gdGFnLlxuICovXG52YXIgaXNCdWlsdEluVGFnID0gbWFrZU1hcCgnc2xvdCxjb21wb25lbnQnLCB0cnVlKTtcblxuLyoqXG4gKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gKi9cbnZhciBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICByZXR1cm4gYXJyLnNwbGljZShpbmRleCwgMSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgcmV0dXJuIGhpdCB8fCAoY2FjaGVbc3RyXSA9IGZuKHN0cikpXG4gIH0pXG59XG5cbi8qKlxuICogQ2FtZWxpemUgYSBoeXBoZW4tZGVsaW1pdGVkIHN0cmluZy5cbiAqL1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbnZhciBjYXBpdGFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxufSk7XG5cbi8qKlxuICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAqL1xudmFyIGh5cGhlbmF0ZVJFID0gL1xcQihbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHJldHVybiBsXG4gICAgICA/IGwgPiAxXG4gICAgICAgID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpXG4gICAgICAgIDogZm4uY2FsbChjdHgsIGEpXG4gICAgICA6IGZuLmNhbGwoY3R4KVxuICB9XG5cbiAgYm91bmRGbi5fbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICByZXR1cm4gYm91bmRGblxufVxuXG5mdW5jdGlvbiBuYXRpdmVCaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmbi5iaW5kKGN0eClcbn1cblxudmFyIGJpbmQgPSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZFxuICA/IG5hdGl2ZUJpbmRcbiAgOiBwb2x5ZmlsbEJpbmQ7XG5cbi8qKlxuICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkgKGxpc3QsIHN0YXJ0KSB7XG4gIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgdmFyIGkgPSBsaXN0Lmxlbmd0aCAtIHN0YXJ0O1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgIHRvW2tleV0gPSBfZnJvbVtrZXldO1xuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHRvT2JqZWN0IChhcnIpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcnJbaV0pIHtcbiAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBQZXJmb3JtIG5vIG9wZXJhdGlvbi5cbiAqIFN0dWJiaW5nIGFyZ3MgdG8gbWFrZSBGbG93IGhhcHB5IHdpdGhvdXQgbGVhdmluZyB1c2VsZXNzIHRyYW5zcGlsZWQgY29kZVxuICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICovXG5mdW5jdGlvbiBub29wIChhLCBiLCBjKSB7fVxuXG4vKipcbiAqIEFsd2F5cyByZXR1cm4gZmFsc2UuXG4gKi9cbnZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xudmFyIGlkZW50aXR5ID0gZnVuY3Rpb24gKF8pIHsgcmV0dXJuIF87IH07XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaXNPYmplY3RBID0gaXNPYmplY3QoYSk7XG4gIHZhciBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGlzQXJyYXlBID0gQXJyYXkuaXNBcnJheShhKTtcbiAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICBpZiAoaXNBcnJheUEgJiYgaXNBcnJheUIpIHtcbiAgICAgICAgcmV0dXJuIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChlLCBpKSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoYSBpbnN0YW5jZW9mIERhdGUgJiYgYiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgfSBlbHNlIGlmICghaXNBcnJheUEgJiYgIWlzQXJyYXlCKSB7XG4gICAgICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgcmV0dXJuIGtleXNBLmxlbmd0aCA9PT0ga2V5c0IubGVuZ3RoICYmIGtleXNBLmV2ZXJ5KGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSB7IHJldHVybiBpIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICovXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgU1NSX0FUVFIgPSAnZGF0YS1zZXJ2ZXItcmVuZGVyZWQnO1xuXG52YXIgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbnZhciBMSUZFQ1lDTEVfSE9PS1MgPSBbXG4gICdiZWZvcmVDcmVhdGUnLFxuICAnY3JlYXRlZCcsXG4gICdiZWZvcmVNb3VudCcsXG4gICdtb3VudGVkJyxcbiAgJ2JlZm9yZVVwZGF0ZScsXG4gICd1cGRhdGVkJyxcbiAgJ2JlZm9yZURlc3Ryb3knLFxuICAnZGVzdHJveWVkJyxcbiAgJ2FjdGl2YXRlZCcsXG4gICdkZWFjdGl2YXRlZCcsXG4gICdlcnJvckNhcHR1cmVkJyxcbiAgJ3NlcnZlclByZWZldGNoJ1xuXTtcblxuLyogICovXG5cblxuXG52YXIgY29uZmlnID0gKHtcbiAgLyoqXG4gICAqIE9wdGlvbiBtZXJnZSBzdHJhdGVnaWVzICh1c2VkIGluIGNvcmUvdXRpbC9vcHRpb25zKVxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIG9wdGlvbk1lcmdlU3RyYXRlZ2llczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICovXG4gIHNpbGVudDogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3cgcHJvZHVjdGlvbiBtb2RlIHRpcCBtZXNzYWdlIG9uIGJvb3Q/XG4gICAqL1xuICBwcm9kdWN0aW9uVGlwOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBoYXNDb25zb2xlID0gdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnO1xuICB2YXIgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudG9VcHBlckNhc2UoKTsgfSlcbiAgICAucmVwbGFjZSgvWy1fXS9nLCAnJyk7IH07XG5cbiAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgdmFyIHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIltWdWUgd2Fybl06IFwiICsgbXNnICsgdHJhY2UpKTtcbiAgICB9XG4gIH07XG5cbiAgdGlwID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJbVnVlIHRpcF06IFwiICsgbXNnICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiB2bSA9PT0gJ2Z1bmN0aW9uJyAmJiB2bS5jaWQgIT0gbnVsbFxuICAgICAgPyB2bS5vcHRpb25zXG4gICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICA/IHZtLiRvcHRpb25zIHx8IHZtLmNvbnN0cnVjdG9yLm9wdGlvbnNcbiAgICAgICAgOiB2bTtcbiAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgdmFyIGZpbGUgPSBvcHRpb25zLl9fZmlsZTtcbiAgICBpZiAoIW5hbWUgJiYgZmlsZSkge1xuICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gKFwiPFwiICsgKGNsYXNzaWZ5KG5hbWUpKSArIFwiPlwiKSA6IFwiPEFub255bW91cz5cIikgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gKFwiIGF0IFwiICsgZmlsZSkgOiAnJylcbiAgICApXG4gIH07XG5cbiAgdmFyIHJlcGVhdCA9IGZ1bmN0aW9uIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzID0gJyc7XG4gICAgd2hpbGUgKG4pIHtcbiAgICAgIGlmIChuICUgMiA9PT0gMSkgeyByZXMgKz0gc3RyOyB9XG4gICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgbiA+Pj0gMTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9O1xuXG4gIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSBmdW5jdGlvbiAodm0pIHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIHZhciB0cmVlID0gW107XG4gICAgICB2YXIgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICBpZiAodHJlZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIGxhc3QgPSB0cmVlW3RyZWUubGVuZ3RoIC0gMV07XG4gICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UrKztcbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPiAwKSB7XG4gICAgICAgICAgICB0cmVlW3RyZWUubGVuZ3RoIC0gMV0gPSBbbGFzdCwgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlXTtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAubWFwKGZ1bmN0aW9uICh2bSwgaSkgeyByZXR1cm4gKFwiXCIgKyAoaSA9PT0gMCA/ICctLS0+ICcgOiByZXBlYXQoJyAnLCA1ICsgaSAqIDIpKSArIChBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyAoKGZvcm1hdENvbXBvbmVudE5hbWUodm1bMF0pKSArIFwiLi4uIChcIiArICh2bVsxXSkgKyBcIiByZWN1cnNpdmUgY2FsbHMpXCIpXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgIC5qb2luKCdcXG4nKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xudmFyIERlcCA9IGZ1bmN0aW9uIERlcCAoKSB7XG4gIHRoaXMuaWQgPSB1aWQrKztcbiAgdGhpcy5zdWJzID0gW107XG59O1xuXG5EZXAucHJvdG90eXBlLmFkZFN1YiA9IGZ1bmN0aW9uIGFkZFN1YiAoc3ViKSB7XG4gIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLnJlbW92ZVN1YiA9IGZ1bmN0aW9uIHJlbW92ZVN1YiAoc3ViKSB7XG4gIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG59O1xuXG5EZXAucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gIH1cbn07XG5cbkRlcC5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gbm90aWZ5ICgpIHtcbiAgLy8gc3RhYmlsaXplIHRoZSBzdWJzY3JpYmVyIGxpc3QgZmlyc3RcbiAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldLCB2bSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICB2YXIgaGF2ZUV4cGVjdGVkVHlwZXMgPSBleHBlY3RlZFR5cGVzLnNvbWUoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQ7IH0pO1xuICBpZiAoIXZhbGlkICYmIGhhdmVFeHBlY3RlZFR5cGVzKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2x8QmlnSW50KSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSwgdm0pIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKCdJbnZhbGlkIHByb3AgdHlwZTogXCInICsgU3RyaW5nKHR5cGUpICsgJ1wiIGlzIG5vdCBhIGNvbnN0cnVjdG9yJywgdm0pO1xuICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG52YXIgZnVuY3Rpb25UeXBlQ2hlY2tSRSA9IC9eXFxzKmZ1bmN0aW9uIChcXHcrKS87XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goZnVuY3Rpb25UeXBlQ2hlY2tSRSk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKFxuICAgIGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICBpc0V4cGxpY2FibGUodHlwZW9mIHZhbHVlKSAmJlxuICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpXG4gICkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIChzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpKTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgKHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSkpICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxudmFyIEVYUExJQ0FCTEVfVFlQRVMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICByZXR1cm4gRVhQTElDQUJMRV9UWVBFUy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCxCaWdJbnQsJyArXG4gICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgKTtcblxuICB2YXIgd2Fybk5vblByZXNlbnQgPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBvciBtZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgXCIgK1xuICAgICAgJ3JlZmVyZW5jZWQgZHVyaW5nIHJlbmRlci4gTWFrZSBzdXJlIHRoYXQgdGhpcyBwcm9wZXJ0eSBpcyByZWFjdGl2ZSwgJyArXG4gICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgJ2luaXRpYWxpemluZyB0aGUgcHJvcGVydHkuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvcmVhY3Rpdml0eS5odG1sI0RlY2xhcmluZy1SZWFjdGl2ZS1Qcm9wZXJ0aWVzLicsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJQcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbXVzdCBiZSBhY2Nlc3NlZCB3aXRoIFxcXCIkZGF0YS5cIiArIGtleSArIFwiXFxcIiBiZWNhdXNlIFwiICtcbiAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAncHJldmVudCBjb25mbGljdHMgd2l0aCBWdWUgaW50ZXJuYWxzLiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2FwaS8jZGF0YScsXG4gICAgICB0YXJnZXRcbiAgICApO1xuICB9O1xuXG4gIHZhciBoYXNQcm94eSA9XG4gICAgdHlwZW9mIFByb3h5ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm94eSk7XG5cbiAgaWYgKGhhc1Byb3h5KSB7XG4gICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0ICh0YXJnZXQsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICB3YXJuKChcIkF2b2lkIG92ZXJ3cml0aW5nIGJ1aWx0LWluIG1vZGlmaWVyIGluIGNvbmZpZy5rZXlDb2RlczogLlwiICsga2V5KSk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFzSGFuZGxlciA9IHtcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgdmFyIGlzQWxsb3dlZCA9IGFsbG93ZWRHbG9iYWxzKGtleSkgfHxcbiAgICAgICAgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleS5jaGFyQXQoMCkgPT09ICdfJyAmJiAhKGtleSBpbiB0YXJnZXQuJGRhdGEpKTtcbiAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzIHx8ICFpc0FsbG93ZWRcbiAgICB9XG4gIH07XG5cbiAgdmFyIGdldEhhbmRsZXIgPSB7XG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKHRhcmdldCwga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgaGFuZGxlcnMgPSBvcHRpb25zLnJlbmRlciAmJiBvcHRpb25zLnJlbmRlci5fd2l0aFN0cmlwcGVkXG4gICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICA6IGhhc0hhbmRsZXI7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSBuZXcgUHJveHkodm0sIGhhbmRsZXJzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICB2YXIgaSwga2V5cztcbiAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgaWYgKCghaXNBICYmICFpc09iamVjdCh2YWwpKSB8fCBPYmplY3QuaXNGcm96ZW4odmFsKSB8fCB2YWwgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWwuX19vYl9fKSB7XG4gICAgdmFyIGRlcElkID0gdmFsLl9fb2JfXy5kZXAuaWQ7XG4gICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgfVxuICBpZiAoaXNBKSB7XG4gICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2ldLCBzZWVuKTsgfVxuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxba2V5c1tpXV0sIHNlZW4pOyB9XG4gIH1cbn1cblxudmFyIG1hcms7XG52YXIgbWVhc3VyZTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXFxcIlwiICsgKGV2ZW50Lm5hbWUpICsgXCJcXFwiOiBnb3QgXCIgKyBTdHJpbmcoY3VyKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc1VuZGVmKG9sZCkpIHtcbiAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlRm5JbnZva2VyKGN1ciwgdm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZU9uY2VIYW5kbGVyKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSk7XG4gICAgICB9XG4gICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgIH0gZWxzZSBpZiAoY3VyICE9PSBvbGQpIHtcbiAgICAgIG9sZC5mbnMgPSBjdXI7XG4gICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgaWYgKGlzVW5kZWYob25bbmFtZV0pKSB7XG4gICAgICBldmVudCA9IG5vcm1hbGl6ZUV2ZW50KG5hbWUpO1xuICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG1lcmdlVk5vZGVIb29rIChkZWYsIGhvb2tLZXksIGhvb2spIHtcbiAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgZGVmID0gZGVmLmRhdGEuaG9vayB8fCAoZGVmLmRhdGEuaG9vayA9IHt9KTtcbiAgfVxuICB2YXIgaW52b2tlcjtcbiAgdmFyIG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgdmFyIHByb3BPcHRpb25zID0gQ3Rvci5vcHRpb25zLnByb3BzO1xuICBpZiAoaXNVbmRlZihwcm9wT3B0aW9ucykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgcmVzID0ge307XG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XG4gIGlmIChpc0RlZihhdHRycykgfHwgaXNEZWYocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiaW5qZWN0aW9uIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUluamVjdCAoaW5qZWN0LCB2bSkge1xuICBpZiAoaW5qZWN0KSB7XG4gICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vICM2NTc0IGluIGNhc2UgdGhlIGluamVjdCBvYmplY3QgaXMgb2JzZXJ2ZWQuLi5cbiAgICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIHZhciBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgdmFyIHByb3ZpZGVEZWZhdWx0ID0gaW5qZWN0W2tleV0uZGVmYXVsdDtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBwcm92aWRlRGVmYXVsdC5jYWxsKHZtKVxuICAgICAgICAgICAgOiBwcm92aWRlRGVmYXVsdDtcbiAgICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FybigoXCJJbmplY3Rpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIG5vdCBmb3VuZFwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyByYXcgY2hpbGRyZW4gVk5vZGVzIGludG8gYSBzbG90IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVNsb3RzIChcbiAgY2hpbGRyZW4sXG4gIGNvbnRleHRcbikge1xuICBpZiAoIWNoaWxkcmVuIHx8ICFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc2xvdHMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICB2YXIgZGF0YSA9IGNoaWxkLmRhdGE7XG4gICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgIGlmIChkYXRhICYmIGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy5zbG90KSB7XG4gICAgICBkZWxldGUgZGF0YS5hdHRycy5zbG90O1xuICAgIH1cbiAgICAvLyBuYW1lZCBzbG90cyBzaG91bGQgb25seSBiZSByZXNwZWN0ZWQgaWYgdGhlIHZub2RlIHdhcyByZW5kZXJlZCBpbiB0aGVcbiAgICAvLyBzYW1lIGNvbnRleHQuXG4gICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgIGRhdGEgJiYgZGF0YS5zbG90ICE9IG51bGxcbiAgICApIHtcbiAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgdmFyIHNsb3QgPSAoc2xvdHNbbmFtZV0gfHwgKHNsb3RzW25hbWVdID0gW10pKTtcbiAgICAgIGlmIChjaGlsZC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3QucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICB2YXIgdm5vZGUgPSByZXMgJiYgcmVzWzBdO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgIXZub2RlIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiB2bm9kZS5pc0NvbW1lbnQgJiYgIWlzQXN5bmNQbGFjZWhvbGRlcih2bm9kZSkpIC8vICM5NjU4LCAjMTAzOTFcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2tSZW5kZXIsXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHtcbiAgICAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICB3YXJuKCdzbG90IHYtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0JywgdGhpcyk7XG4gICAgICB9XG4gICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgfVxuICAgIG5vZGVzID1cbiAgICAgIHNjb3BlZFNsb3RGbihwcm9wcykgfHxcbiAgICAgICh0eXBlb2YgZmFsbGJhY2tSZW5kZXIgPT09ICdmdW5jdGlvbicgPyBmYWxsYmFja1JlbmRlcigpIDogZmFsbGJhY2tSZW5kZXIpO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID1cbiAgICAgIHRoaXMuJHNsb3RzW25hbWVdIHx8XG4gICAgICAodHlwZW9mIGZhbGxiYWNrUmVuZGVyID09PSAnZnVuY3Rpb24nID8gZmFsbGJhY2tSZW5kZXIoKSA6IGZhbGxiYWNrUmVuZGVyKTtcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG4gIHJldHVybiBldmVudEtleUNvZGUgPT09IHVuZGVmaW5lZFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICBpZiAoY29udGV4dC5faXNNb3VudGVkKSB7XG4gICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAvLyBEdXJpbmcgdXBkYXRlcywgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCdzIGNoaWxkIGNvbXBvbmVudHMgbWF5XG4gICAgICAgIC8vIGNoYW5nZSwgc28gZGlyZWN0bHkgd2Fsa2luZyB0aGUgdHJlZSBoZXJlIG1heSBjYWxsIGFjdGl2YXRlZCBob29rc1xuICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgIC8vIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgd2hvbGUgcGF0Y2ggcHJvY2VzcyBlbmRlZC5cbiAgICAgICAgcXVldWVBY3RpdmF0ZWRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkKSB7XG4gICAgICBpZiAoIXZub2RlLmRhdGEua2VlcEFsaXZlKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbnZhciBob29rc1RvTWVyZ2UgPSBPYmplY3Qua2V5cyhjb21wb25lbnRWTm9kZUhvb2tzKTtcblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICB2bm9kZSxcbiAgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4gIHBhcmVudFxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pICYmIGRhdGEudGFnICE9PSAnY29tcG9uZW50Jykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiICsgdGFnICsgXCI+LlwiKSxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgfSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gIH1cbn1cblxudmFyIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlbmRlck1peGluIChWdWUpIHtcbiAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgaW5zdGFsbFJlbmRlckhlbHBlcnMoVnVlLnByb3RvdHlwZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS5fcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHJlZiA9IHZtLiRvcHRpb25zO1xuICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgdmFyIHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdXNlIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyXCIpO1xuICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAvLyBvciBwcmV2aW91cyB2bm9kZSB0byBwcmV2ZW50IHJlbmRlciBlcnJvciBjYXVzaW5nIGJsYW5rIGNvbXBvbmVudFxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnTXVsdGlwbGUgcm9vdCBub2RlcyByZXR1cm5lZCBmcm9tIHJlbmRlciBmdW5jdGlvbi4gUmVuZGVyIGZ1bmN0aW9uICcgK1xuICAgICAgICAgICdzaG91bGQgcmV0dXJuIGEgc2luZ2xlIHJvb3Qgbm9kZS4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICB9XG4gICAgLy8gc2V0IHBhcmVudFxuICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICByZXR1cm4gdm5vZGVcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVuc3VyZUN0b3IgKGNvbXAsIGJhc2UpIHtcbiAgaWYgKFxuICAgIGNvbXAuX19lc01vZHVsZSB8fFxuICAgIChoYXNTeW1ib2wgJiYgY29tcFtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbiAgKSB7XG4gICAgY29tcCA9IGNvbXAuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICA/IGJhc2UuZXh0ZW5kKGNvbXApXG4gICAgOiBjb21wXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIgKFxuICBmYWN0b3J5LFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgdmFyIG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGE6IGRhdGEsIGNvbnRleHQ6IGNvbnRleHQsIGNoaWxkcmVuOiBjaGlsZHJlbiwgdGFnOiB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIHZhciBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAvLyBhbHJlYWR5IHBlbmRpbmdcbiAgICBmYWN0b3J5Lm93bmVycy5wdXNoKG93bmVyKTtcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBpZiAob3duZXIgJiYgIWlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIHZhciBvd25lcnMgPSBmYWN0b3J5Lm93bmVycyA9IFtvd25lcl07XG4gICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgIHZhciB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgIHZhciB0aW1lclRpbWVvdXQgPSBudWxsXG5cbiAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgIHZhciBmb3JjZVJlbmRlciA9IGZ1bmN0aW9uIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKHRpbWVyTG9hZGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lckxvYWRpbmcpO1xuICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRpbWVyVGltZW91dCAhPT0gbnVsbCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHJlc29sdmUgPSBvbmNlKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICBmYWN0b3J5LnJlc29sdmVkID0gZW5zdXJlQ3RvcihyZXMsIGJhc2VDdG9yKTtcbiAgICAgIC8vIGludm9rZSBjYWxsYmFja3Mgb25seSBpZiB0aGlzIGlzIG5vdCBhIHN5bmNocm9ub3VzIHJlc29sdmVcbiAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgaWYgKCFzeW5jKSB7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVqZWN0ID0gb25jZShmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHRvIHJlc29sdmUgYXN5bmMgY29tcG9uZW50OiBcIiArIChTdHJpbmcoZmFjdG9yeSkpICtcbiAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICApO1xuICAgICAgaWYgKGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgICAgICAgICAgID8gKFwidGltZW91dCAoXCIgKyAocmVzLnRpbWVvdXQpICsgXCJtcylcIilcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgIHJldHVybiBjXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEV2ZW50cyAodm0pIHtcbiAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZtLl9oYXNIb29rRXZlbnQgPSBmYWxzZTtcbiAgLy8gaW5pdCBwYXJlbnQgYXR0YWNoZWQgZXZlbnRzXG4gIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBpZiAobGlzdGVuZXJzKSB7XG4gICAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMpO1xuICB9XG59XG5cbnZhciB0YXJnZXQ7XG5cbmZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb24oZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9mZihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIF90YXJnZXQuJG9mZihldmVudCwgb25jZUhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICB2bSxcbiAgbGlzdGVuZXJzLFxuICBvbGRMaXN0ZW5lcnNcbikge1xuICB0YXJnZXQgPSB2bTtcbiAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICB0YXJnZXQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgdmFyIGhvb2tSRSA9IC9eaG9vazovO1xuICBWdWUucHJvdG90eXBlLiRvbiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGZ1bmN0aW9uIG9uICgpIHtcbiAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgIGZuLmFwcGx5KHZtLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBvbi5mbiA9IGZuO1xuICAgIHZtLiRvbihldmVudCwgb24pO1xuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9mZiA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGFsbFxuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gYXJyYXkgb2YgZXZlbnRzXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpJDEgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpJDEgPCBsOyBpJDErKykge1xuICAgICAgICB2bS4kb2ZmKGV2ZW50W2kkMV0sIGZuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoIWNicykge1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIGlmICghZm4pIHtcbiAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgdmFyIGNiO1xuICAgIHZhciBpID0gY2JzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICBjYiA9IGNic1tpXTtcbiAgICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7XG4gICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgbG93ZXJDYXNlRXZlbnQgPSBldmVudC50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKGxvd2VyQ2FzZUV2ZW50ICE9PSBldmVudCAmJiB2bS5fZXZlbnRzW2xvd2VyQ2FzZUV2ZW50XSkge1xuICAgICAgICB0aXAoXG4gICAgICAgICAgXCJFdmVudCBcXFwiXCIgKyBsb3dlckNhc2VFdmVudCArIFwiXFxcIiBpcyBlbWl0dGVkIGluIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiIGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgIFwidi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIFwiICtcbiAgICAgICAgICBcIllvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIChoeXBoZW5hdGUoZXZlbnQpKSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgdmFyIGluZm8gPSBcImV2ZW50IGhhbmRsZXIgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiXCI7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG52YXIgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIHZhciBwcmV2QWN0aXZlSW5zdGFuY2UgPSBhY3RpdmVJbnN0YW5jZTtcbiAgYWN0aXZlSW5zdGFuY2UgPSB2bTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBhY3RpdmVJbnN0YW5jZSA9IHByZXZBY3RpdmVJbnN0YW5jZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TGlmZWN5Y2xlICh2bSkge1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuXG4gIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgaWYgKHBhcmVudCAmJiAhb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICB9XG5cbiAgdm0uJHBhcmVudCA9IHBhcmVudDtcbiAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICB2bS4kY2hpbGRyZW4gPSBbXTtcbiAgdm0uJHJlZnMgPSB7fTtcblxuICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gIHZtLl9pbmFjdGl2ZSA9IG51bGw7XG4gIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gIHZtLl9pc0Rlc3Ryb3llZCA9IGZhbHNlO1xuICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBsaWZlY3ljbGVNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcHJldkVsID0gdm0uJGVsO1xuICAgIHZhciBwcmV2Vm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRkZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVEZXN0cm95Jyk7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBuYW1lID0gdm0uX25hbWU7XG4gICAgICB2YXIgaWQgPSB2bS5fdWlkO1xuICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgdmFyIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgaWQ7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcmVuZGVyXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcblxuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB2bS5fdXBkYXRlKHZub2RlLCBoeWRyYXRpbmcpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdm0uX3VwZGF0ZSh2bS5fcmVuZGVyKCksIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHdlIHNldCB0aGlzIHRvIHZtLl93YXRjaGVyIGluc2lkZSB0aGUgd2F0Y2hlcidzIGNvbnN0cnVjdG9yXG4gIC8vIHNpbmNlIHRoZSB3YXRjaGVyJ3MgaW5pdGlhbCBwYXRjaCBtYXkgY2FsbCAkZm9yY2VVcGRhdGUgKGUuZy4gaW5zaWRlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgbmV3IFdhdGNoZXIodm0sIHVwZGF0ZUNvbXBvbmVudCwgbm9vcCwge1xuICAgIGJlZm9yZTogZnVuY3Rpb24gYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KSB8fFxuICAgICghbmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkpXG4gICk7XG5cbiAgLy8gQW55IHN0YXRpYyBzbG90IGNoaWxkcmVuIGZyb20gdGhlIHBhcmVudCBtYXkgaGF2ZSBjaGFuZ2VkIGR1cmluZyBwYXJlbnQnc1xuICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgLy8gdXBkYXRlIGlzIG5lY2Vzc2FyeSB0byBlbnN1cmUgY29ycmVjdG5lc3MuXG4gIHZhciBuZWVkc0ZvcmNlVXBkYXRlID0gISEoXG4gICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiB8fCAgLy8gaGFzIG9sZCBzdGF0aWMgc2xvdHNcbiAgICBoYXNEeW5hbWljU2NvcGVkU2xvdFxuICApO1xuXG4gIHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuICB2bS4kdm5vZGUgPSBwYXJlbnRWbm9kZTsgLy8gdXBkYXRlIHZtJ3MgcGxhY2Vob2xkZXIgbm9kZSB3aXRob3V0IHJlLXJlbmRlclxuXG4gIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICB2bS5fdm5vZGUucGFyZW50ID0gcGFyZW50Vm5vZGU7XG4gIH1cbiAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgLy8gdXBkYXRlICRhdHRycyBhbmQgJGxpc3RlbmVycyBoYXNoXG4gIC8vIHRoZXNlIGFyZSBhbHNvIHJlYWN0aXZlIHNvIHRoZXkgbWF5IHRyaWdnZXIgY2hpbGQgdXBkYXRlIGlmIHRoZSBjaGlsZFxuICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICB2bS4kYXR0cnMgPSBwYXJlbnRWbm9kZS5kYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0O1xuICB2bS4kbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuXG4gIC8vIHVwZGF0ZSBwcm9wc1xuICBpZiAocHJvcHNEYXRhICYmIHZtLiRvcHRpb25zLnByb3BzKSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgdmFyIHByb3BLZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzIHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgIHZhciBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZhciBvbGRMaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAvLyByZXNvbHZlIHNsb3RzICsgZm9yY2UgdXBkYXRlIGlmIGhhcyBjaGlsZHJlblxuICBpZiAobmVlZHNGb3JjZVVwZGF0ZSkge1xuICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgdm0uJGZvcmNlVXBkYXRlKCk7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNpcmN1bGFyID0ge307XG4gIH1cbiAgd2FpdGluZyA9IGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSAjNjU2NiByZXF1aXJlcyBzYXZpbmcgdGhlIHRpbWVzdGFtcCB3aGVuIGV2ZW50IGxpc3RlbmVycyBhcmVcbi8vIGF0dGFjaGVkLiBIb3dldmVyLCBjYWxsaW5nIHBlcmZvcm1hbmNlLm5vdygpIGhhcyBhIHBlcmYgb3ZlcmhlYWQgZXNwZWNpYWxseVxuLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbi8vIGV2ZXJ5IHRpbWUgdGhlIHNjaGVkdWxlciBmbHVzaGVzIGFuZCB1c2UgdGhhdCBmb3IgYWxsIGV2ZW50IGxpc3RlbmVyc1xuLy8gYXR0YWNoZWQgZHVyaW5nIHRoYXQgZmx1c2guXG52YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuLy8gQXN5bmMgZWRnZSBjYXNlIGZpeCByZXF1aXJlcyBzdG9yaW5nIGFuIGV2ZW50IGxpc3RlbmVyJ3MgYXR0YWNoIHRpbWVzdGFtcC5cbnZhciBnZXROb3cgPSBEYXRlLm5vdztcblxuLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbi8vIHRpbWVzdGFtcCBjYW4gZWl0aGVyIGJlIGhpLXJlcyAocmVsYXRpdmUgdG8gcGFnZSBsb2FkKSBvciBsb3ctcmVzXG4vLyAocmVsYXRpdmUgdG8gVU5JWCBlcG9jaCksIHNvIGluIG9yZGVyIHRvIGNvbXBhcmUgdGltZSB3ZSBoYXZlIHRvIHVzZSB0aGVcbi8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbi8vIEFsbCBJRSB2ZXJzaW9ucyB1c2UgbG93LXJlcyBldmVudCB0aW1lc3RhbXBzLCBhbmQgaGF2ZSBwcm9ibGVtYXRpYyBjbG9ja1xuLy8gaW1wbGVtZW50YXRpb25zICgjOTYzMilcbmlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICBpZiAoXG4gICAgcGVyZm9ybWFuY2UgJiZcbiAgICB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nICYmXG4gICAgZ2V0Tm93KCkgPiBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKS50aW1lU3RhbXBcbiAgKSB7XG4gICAgLy8gaWYgdGhlIGV2ZW50IHRpbWVzdGFtcCwgYWx0aG91Z2ggZXZhbHVhdGVkIEFGVEVSIHRoZSBEYXRlLm5vdygpLCBpc1xuICAgIC8vIHNtYWxsZXIgdGhhbiBpdCwgaXQgbWVhbnMgdGhlIGV2ZW50IGlzIHVzaW5nIGEgaGktcmVzIHRpbWVzdGFtcCxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgLy8gd2VsbC5cbiAgICBnZXROb3cgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTsgfTtcbiAgfVxufVxuXG4vKipcbiAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICovXG5mdW5jdGlvbiBmbHVzaFNjaGVkdWxlclF1ZXVlICgpIHtcbiAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gIGZsdXNoaW5nID0gdHJ1ZTtcbiAgdmFyIHdhdGNoZXIsIGlkO1xuXG4gIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAvLyBUaGlzIGVuc3VyZXMgdGhhdDpcbiAgLy8gMS4gQ29tcG9uZW50cyBhcmUgdXBkYXRlZCBmcm9tIHBhcmVudCB0byBjaGlsZC4gKGJlY2F1c2UgcGFyZW50IGlzIGFsd2F5c1xuICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gIC8vIDIuIEEgY29tcG9uZW50J3MgdXNlciB3YXRjaGVycyBhcmUgcnVuIGJlZm9yZSBpdHMgcmVuZGVyIHdhdGNoZXIgKGJlY2F1c2VcbiAgLy8gICAgdXNlciB3YXRjaGVycyBhcmUgY3JlYXRlZCBiZWZvcmUgdGhlIHJlbmRlciB3YXRjaGVyKVxuICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAvLyAgICBpdHMgd2F0Y2hlcnMgY2FuIGJlIHNraXBwZWQuXG4gIHF1ZXVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcblxuICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgLy8gYXMgd2UgcnVuIGV4aXN0aW5nIHdhdGNoZXJzXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHF1ZXVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgaWYgKHdhdGNoZXIuYmVmb3JlKSB7XG4gICAgICB3YXRjaGVyLmJlZm9yZSgpO1xuICAgIH1cbiAgICBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaGFzW2lkXSA9IG51bGw7XG4gICAgd2F0Y2hlci5ydW4oKTtcbiAgICAvLyBpbiBkZXYgYnVpbGQsIGNoZWNrIGFuZCBzdG9wIGNpcmN1bGFyIHVwZGF0ZXMuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbnZhciB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbnZhciBXYXRjaGVyID0gZnVuY3Rpb24gV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBjYixcbiAgb3B0aW9ucyxcbiAgaXNSZW5kZXJXYXRjaGVyXG4pIHtcbiAgdGhpcy52bSA9IHZtO1xuICBpZiAoaXNSZW5kZXJXYXRjaGVyKSB7XG4gICAgdm0uX3dhdGNoZXIgPSB0aGlzO1xuICB9XG4gIHZtLl93YXRjaGVycy5wdXNoKHRoaXMpO1xuICAvLyBvcHRpb25zXG4gIGlmIChvcHRpb25zKSB7XG4gICAgdGhpcy5kZWVwID0gISFvcHRpb25zLmRlZXA7XG4gICAgdGhpcy51c2VyID0gISFvcHRpb25zLnVzZXI7XG4gICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgdGhpcy5zeW5jID0gISFvcHRpb25zLnN5bmM7XG4gICAgdGhpcy5iZWZvcmUgPSBvcHRpb25zLmJlZm9yZTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRlZXAgPSB0aGlzLnVzZXIgPSB0aGlzLmxhenkgPSB0aGlzLnN5bmMgPSBmYWxzZTtcbiAgfVxuICB0aGlzLmNiID0gY2I7XG4gIHRoaXMuaWQgPSArK3VpZCQyOyAvLyB1aWQgZm9yIGJhdGNoaW5nXG4gIHRoaXMuYWN0aXZlID0gdHJ1ZTtcbiAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgdGhpcy5kZXBzID0gW107XG4gIHRoaXMubmV3RGVwcyA9IFtdO1xuICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMubmV3RGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5leHByZXNzaW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgID8gZXhwT3JGbi50b1N0cmluZygpXG4gICAgOiAnJztcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFxcXCJcIiArIGV4cE9yRm4gKyBcIlxcXCIgXCIgK1xuICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAnRm9yIGZ1bGwgY29udHJvbCwgdXNlIGEgZnVuY3Rpb24gaW5zdGVhZC4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgID8gdW5kZWZpbmVkXG4gICAgOiB0aGlzLmdldCgpO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSB0aGUgZ2V0dGVyLCBhbmQgcmUtY29sbGVjdCBkZXBlbmRlbmNpZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoKSB7XG4gIHB1c2hUYXJnZXQodGhpcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZtID0gdGhpcy52bTtcbiAgdHJ5IHtcbiAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIC8vIFwidG91Y2hcIiBldmVyeSBwcm9wZXJ0eSBzbyB0aGV5IGFyZSBhbGwgdHJhY2tlZCBhc1xuICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgIHRyYXZlcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgcG9wVGFyZ2V0KCk7XG4gICAgdGhpcy5jbGVhbnVwRGVwcygpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufTtcblxuLyoqXG4gKiBBZGQgYSBkZXBlbmRlbmN5IHRvIHRoaXMgZGlyZWN0aXZlLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICB2YXIgaWQgPSBkZXAuaWQ7XG4gIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgdGhpcy5uZXdEZXBzLnB1c2goZGVwKTtcbiAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIENsZWFuIHVwIGZvciBkZXBlbmRlbmN5IGNvbGxlY3Rpb24uXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmNsZWFudXBEZXBzID0gZnVuY3Rpb24gY2xlYW51cERlcHMgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGRlcC5pZCkpIHtcbiAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgfVxuICB9XG4gIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgdGhpcy5uZXdEZXBJZHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gIHRtcCA9IHRoaXMuZGVwcztcbiAgdGhpcy5kZXBzID0gdGhpcy5uZXdEZXBzO1xuICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xufTtcblxuLyoqXG4gKiBTdWJzY3JpYmVyIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIHdoZW4gYSBkZXBlbmRlbmN5IGNoYW5nZXMuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0aGlzLmxhenkpIHtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnN5bmMpIHtcbiAgICB0aGlzLnJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHF1ZXVlV2F0Y2hlcih0aGlzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAqIFdpbGwgYmUgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIHZhciB2YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gICAgaWYgKFxuICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgIC8vIERlZXAgd2F0Y2hlcnMgYW5kIHdhdGNoZXJzIG9uIE9iamVjdC9BcnJheXMgc2hvdWxkIGZpcmUgZXZlblxuICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgaXNPYmplY3QodmFsdWUpIHx8XG4gICAgICB0aGlzLmRlZXBcbiAgICApIHtcbiAgICAgIC8vIHNldCBuZXcgdmFsdWVcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyh0aGlzLmNiLCB0aGlzLnZtLCBbdmFsdWUsIG9sZFZhbHVlXSwgdGhpcy52bSwgaW5mbyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcGFyZW50IGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcIkluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBcIiArXG4gICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgdmFyIGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIlRoZSBkYXRhIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlY2xhcmVkIGFzIGEgcHJvcC4gXCIgK1xuICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICBwcm94eSh2bSwgXCJfZGF0YVwiLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcImRhdGEoKVwiKTtcbiAgICByZXR1cm4ge31cbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG52YXIgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIHdhdGNoZXJzID0gdm0uX2NvbXB1dGVkV2F0Y2hlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBqdXN0IGdldHRlcnMgZHVyaW5nIFNTUlxuICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIHZhciB1c2VyRGVmID0gY29tcHV0ZWRba2V5XTtcbiAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgZ2V0dGVyID09IG51bGwpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIChcIkdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAvLyBjcmVhdGUgaW50ZXJuYWwgd2F0Y2hlciBmb3IgdGhlIGNvbXB1dGVkIHByb3BlcnR5LlxuICAgICAgd2F0Y2hlcnNba2V5XSA9IG5ldyBXYXRjaGVyKFxuICAgICAgICB2bSxcbiAgICAgICAgZ2V0dGVyIHx8IG5vb3AsXG4gICAgICAgIG5vb3AsXG4gICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgIC8vIGNvbXBvbmVudCBwcm90b3R5cGUuIFdlIG9ubHkgbmVlZCB0byBkZWZpbmUgY29tcHV0ZWQgcHJvcGVydGllcyBkZWZpbmVkXG4gICAgLy8gYXQgaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKHZtLCBrZXksIHVzZXJEZWYpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGtleSBpbiB2bS4kZGF0YSkge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuXCIpLCB2bSk7XG4gICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5cIiksIHZtKTtcbiAgICAgIH0gZWxzZSBpZiAodm0uJG9wdGlvbnMubWV0aG9kcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMubWV0aG9kcykge1xuICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgbWV0aG9kLlwiKSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZpbmVDb21wdXRlZCAoXG4gIHRhcmdldCxcbiAga2V5LFxuICB1c2VyRGVmXG4pIHtcbiAgdmFyIHNob3VsZENhY2hlID0gIWlzU2VydmVyUmVuZGVyaW5nKCk7XG4gIGlmICh0eXBlb2YgdXNlckRlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZik7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gIH0gZWxzZSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHVzZXJEZWYuZ2V0XG4gICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgICA6IGNyZWF0ZUdldHRlckludm9rZXIodXNlckRlZi5nZXQpXG4gICAgICA6IG5vb3A7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IHVzZXJEZWYuc2V0IHx8IG5vb3A7XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVkR2V0dGVyIChrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbXB1dGVkR2V0dGVyICgpIHtcbiAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdmFyIGluZm8gPSBcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgcHVzaFRhcmdldCgpO1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2IsIHZtLCBbd2F0Y2hlci52YWx1ZV0sIHZtLCBpbmZvKTtcbiAgICAgIHBvcFRhcmdldCgpO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gdW53YXRjaEZuICgpIHtcbiAgICAgIHdhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkJDMgPSAwO1xuXG5mdW5jdGlvbiBpbml0TWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIC8vIGEgdWlkXG4gICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICB2YXIgc3RhcnRUYWcsIGVuZFRhZztcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbml0UHJveHkodm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gICAgLy8gZXhwb3NlIHJlYWwgc2VsZlxuICAgIHZtLl9zZWxmID0gdm07XG4gICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgaW5pdEV2ZW50cyh2bSk7XG4gICAgaW5pdFJlbmRlcih2bSk7XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICBpbml0SW5qZWN0aW9ucyh2bSk7IC8vIHJlc29sdmUgaW5qZWN0aW9ucyBiZWZvcmUgZGF0YS9wcm9wc1xuICAgIGluaXRTdGF0ZSh2bSk7XG4gICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgIGNhbGxIb29rKHZtLCAnY3JlYXRlZCcpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyAodm0uX25hbWUpICsgXCIgaW5pdFwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfVxuXG4gICAgaWYgKHZtLiRvcHRpb25zLmVsKSB7XG4gICAgICB2bS4kbW91bnQodm0uJG9wdGlvbnMuZWwpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gIG9wdHMucGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIG9wdHMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG5cbiAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIG9wdHMucHJvcHNEYXRhID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnByb3BzRGF0YTtcbiAgb3B0cy5fcGFyZW50TGlzdGVuZXJzID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gIG9wdHMuX2NvbXBvbmVudFRhZyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy50YWc7XG5cbiAgaWYgKG9wdGlvbnMucmVuZGVyKSB7XG4gICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICBvcHRzLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgdmFyIHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgdmFyIGNhY2hlZFN1cGVyT3B0aW9ucyA9IEN0b3Iuc3VwZXJPcHRpb25zO1xuICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgLy8gc3VwZXIgb3B0aW9uIGNoYW5nZWQsXG4gICAgICAvLyBuZWVkIHRvIHJlc29sdmUgbmV3IG9wdGlvbnMuXG4gICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbGF0ZS1tb2RpZmllZC9hdHRhY2hlZCBvcHRpb25zICgjNDk3NilcbiAgICAgIHZhciBtb2RpZmllZE9wdGlvbnMgPSByZXNvbHZlTW9kaWZpZWRPcHRpb25zKEN0b3IpO1xuICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgIGlmIChtb2RpZmllZE9wdGlvbnMpIHtcbiAgICAgICAgZXh0ZW5kKEN0b3IuZXh0ZW5kT3B0aW9ucywgbW9kaWZpZWRPcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoc3VwZXJPcHRpb25zLCBDdG9yLmV4dGVuZE9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMubmFtZSkge1xuICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgdmFyIG1vZGlmaWVkO1xuICB2YXIgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICBmb3IgKHZhciBrZXkgaW4gbGF0ZXN0KSB7XG4gICAgaWYgKGxhdGVzdFtrZXldICE9PSBzZWFsZWRba2V5XSkge1xuICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAhKHRoaXMgaW5zdGFuY2VvZiBWdWUpXG4gICkge1xuICAgIHdhcm4oJ1Z1ZSBpcyBhIGNvbnN0cnVjdG9yIGFuZCBzaG91bGQgYmUgY2FsbGVkIHdpdGggdGhlIGBuZXdgIGtleXdvcmQnKTtcbiAgfVxuICB0aGlzLl9pbml0KG9wdGlvbnMpO1xufVxuXG5pbml0TWl4aW4oVnVlKTtcbnN0YXRlTWl4aW4oVnVlKTtcbmV2ZW50c01peGluKFZ1ZSk7XG5saWZlY3ljbGVNaXhpbihWdWUpO1xucmVuZGVyTWl4aW4oVnVlKTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRVc2UgKFZ1ZSkge1xuICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIHZhciBpbnN0YWxsZWRQbHVnaW5zID0gKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgfHwgKHRoaXMuX2luc3RhbGxlZFBsdWdpbnMgPSBbXSkpO1xuICAgIGlmIChpbnN0YWxsZWRQbHVnaW5zLmluZGV4T2YocGx1Z2luKSA+IC0xKSB7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8vIGFkZGl0aW9uYWwgcGFyYW1ldGVyc1xuICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgdmFyIGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgIHZhciBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9IGV4dGVuZE9wdGlvbnMubmFtZSB8fCBTdXBlci5vcHRpb25zLm5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgbmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBTdWIgPSBmdW5jdGlvbiBWdWVDb21wb25lbnQgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgfTtcbiAgICBTdWIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShTdXBlci5wcm90b3R5cGUpO1xuICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgU3ViLmNpZCA9IGNpZCsrO1xuICAgIFN1Yi5vcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgIGV4dGVuZE9wdGlvbnNcbiAgICApO1xuICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgLy8gRm9yIHByb3BzIGFuZCBjb21wdXRlZCBwcm9wZXJ0aWVzLCB3ZSBkZWZpbmUgdGhlIHByb3h5IGdldHRlcnMgb25cbiAgICAvLyB0aGUgVnVlIGluc3RhbmNlcyBhdCBleHRlbnNpb24gdGltZSwgb24gdGhlIGV4dGVuZGVkIHByb3RvdHlwZS4gVGhpc1xuICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICBpZiAoU3ViLm9wdGlvbnMucHJvcHMpIHtcbiAgICAgIGluaXRQcm9wcyQxKFN1Yik7XG4gICAgfVxuICAgIGlmIChTdWIub3B0aW9ucy5jb21wdXRlZCkge1xuICAgICAgaW5pdENvbXB1dGVkJDEoU3ViKTtcbiAgICB9XG5cbiAgICAvLyBhbGxvdyBmdXJ0aGVyIGV4dGVuc2lvbi9taXhpbi9wbHVnaW4gdXNhZ2VcbiAgICBTdWIuZXh0ZW5kID0gU3VwZXIuZXh0ZW5kO1xuICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgIFN1Yi51c2UgPSBTdXBlci51c2U7XG5cbiAgICAvLyBjcmVhdGUgYXNzZXQgcmVnaXN0ZXJzLCBzbyBleHRlbmRlZCBjbGFzc2VzXG4gICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFN1Ylt0eXBlXSA9IFN1cGVyW3R5cGVdO1xuICAgIH0pO1xuICAgIC8vIGVuYWJsZSByZWN1cnNpdmUgc2VsZi1sb29rdXBcbiAgICBpZiAobmFtZSkge1xuICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICB9XG5cbiAgICAvLyBrZWVwIGEgcmVmZXJlbmNlIHRvIHRoZSBzdXBlciBvcHRpb25zIGF0IGV4dGVuc2lvbiB0aW1lLlxuICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgLy8gYmVlbiB1cGRhdGVkLlxuICAgIFN1Yi5zdXBlck9wdGlvbnMgPSBTdXBlci5vcHRpb25zO1xuICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICBTdWIuc2VhbGVkT3B0aW9ucyA9IGV4dGVuZCh7fSwgU3ViLm9wdGlvbnMpO1xuXG4gICAgLy8gY2FjaGUgY29uc3RydWN0b3JcbiAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICByZXR1cm4gU3ViXG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyQxIChDb21wKSB7XG4gIHZhciBwcm9wcyA9IENvbXAub3B0aW9ucy5wcm9wcztcbiAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIFwiX3Byb3BzXCIsIGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkJDEgKENvbXApIHtcbiAgdmFyIGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICBkZWZpbmVDb21wdXRlZChDb21wLnByb3RvdHlwZSwga2V5LCBjb21wdXRlZFtrZXldKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEFzc2V0UmVnaXN0ZXJzIChWdWUpIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhc3NldCByZWdpc3RyYXRpb24gbWV0aG9kcy5cbiAgICovXG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHZhciBuYW1lID0gZW50cnkubmFtZTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgZW50cnkgPSBjYWNoZVtrZXldO1xuICBpZiAoZW50cnkgJiYgKCFjdXJyZW50IHx8IGVudHJ5LnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgZW50cnkuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGNhY2hlVk5vZGU6IGZ1bmN0aW9uIGNhY2hlVk5vZGUoKSB7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZi5jYWNoZTtcbiAgICAgIHZhciBrZXlzID0gcmVmLmtleXM7XG4gICAgICB2YXIgdm5vZGVUb0NhY2hlID0gcmVmLnZub2RlVG9DYWNoZTtcbiAgICAgIHZhciBrZXlUb0NhY2hlID0gcmVmLmtleVRvQ2FjaGU7XG4gICAgICBpZiAodm5vZGVUb0NhY2hlKSB7XG4gICAgICAgIHZhciB0YWcgPSB2bm9kZVRvQ2FjaGUudGFnO1xuICAgICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZVRvQ2FjaGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGVUb0NhY2hlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgIGNhY2hlW2tleVRvQ2FjaGVdID0ge1xuICAgICAgICAgIG5hbWU6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyksXG4gICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgY29tcG9uZW50SW5zdGFuY2U6IGNvbXBvbmVudEluc3RhbmNlLFxuICAgICAgICB9O1xuICAgICAgICBrZXlzLnB1c2goa2V5VG9DYWNoZSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLmNhY2hlVk5vZGUoKTtcbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZVZOb2RlKCk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbGF5IHNldHRpbmcgdGhlIGNhY2hlIHVudGlsIHVwZGF0ZVxuICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IHZub2RlO1xuICAgICAgICB0aGlzLmtleVRvQ2FjaGUgPSBrZXk7XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjb25maWdEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCByZXBsYWNlIHRoZSBWdWUuY29uZmlnIG9iamVjdCwgc2V0IGluZGl2aWR1YWwgZmllbGRzIGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdjb25maWcnLCBjb25maWdEZWYpO1xuXG4gIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAvLyBOT1RFOiB0aGVzZSBhcmUgbm90IGNvbnNpZGVyZWQgcGFydCBvZiB0aGUgcHVibGljIEFQSSAtIGF2b2lkIHJlbHlpbmcgb25cbiAgLy8gdGhlbSB1bmxlc3MgeW91IGFyZSBhd2FyZSBvZiB0aGUgcmlzay5cbiAgVnVlLnV0aWwgPSB7XG4gICAgd2Fybjogd2FybixcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICBWdWUub3B0aW9uc1t0eXBlICsgJ3MnXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIH0pO1xuXG4gIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgLy8gY29tcG9uZW50cyB3aXRoIGluIFdlZXgncyBtdWx0aS1pbnN0YW5jZSBzY2VuYXJpb3MuXG4gIFZ1ZS5vcHRpb25zLl9iYXNlID0gVnVlO1xuXG4gIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgaW5pdFVzZShWdWUpO1xuICBpbml0TWl4aW4kMShWdWUpO1xuICBpbml0RXh0ZW5kKFZ1ZSk7XG4gIGluaXRBc3NldFJlZ2lzdGVycyhWdWUpO1xufVxuXG5pbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGlzU2VydmVyJywge1xuICBnZXQ6IGlzU2VydmVyUmVuZGVyaW5nXG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckc3NyQ29udGV4dCcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgcmV0dXJuIHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHRcbiAgfVxufSk7XG5cbi8vIGV4cG9zZSBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCBmb3Igc3NyIHJ1bnRpbWUgaGVscGVyIGluc3RhbGxhdGlvblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ0Z1bmN0aW9uYWxSZW5kZXJDb250ZXh0Jywge1xuICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbn0pO1xuXG5WdWUudmVyc2lvbiA9ICcyLjYuMTQnO1xuXG4vKiAgKi9cblxuLy8gdGhlc2UgYXJlIHJlc2VydmVkIGZvciB3ZWIgYmVjYXVzZSB0aGV5IGFyZSBkaXJlY3RseSBjb21waWxlZCBhd2F5XG4vLyBkdXJpbmcgdGVtcGxhdGUgY29tcGlsYXRpb25cbnZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbnZhciBhY2NlcHRWYWx1ZSA9IG1ha2VNYXAoJ2lucHV0LHRleHRhcmVhLG9wdGlvbixzZWxlY3QscHJvZ3Jlc3MnKTtcbnZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgcmV0dXJuIChcbiAgICAoYXR0ciA9PT0gJ3ZhbHVlJyAmJiBhY2NlcHRWYWx1ZSh0YWcpKSAmJiB0eXBlICE9PSAnYnV0dG9uJyB8fFxuICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgKGF0dHIgPT09ICdjaGVja2VkJyAmJiB0YWcgPT09ICdpbnB1dCcpIHx8XG4gICAgKGF0dHIgPT09ICdtdXRlZCcgJiYgdGFnID09PSAndmlkZW8nKVxuICApXG59O1xuXG52YXIgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG52YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG52YXIgY29udmVydEVudW1lcmF0ZWRWYWx1ZSA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHJldHVybiBpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJ1xuICAgID8gJ2ZhbHNlJ1xuICAgIC8vIGFsbG93IGFyYml0cmFyeSBzdHJpbmcgdmFsdWUgZm9yIGNvbnRlbnRlZGl0YWJsZVxuICAgIDoga2V5ID09PSAnY29udGVudGVkaXRhYmxlJyAmJiBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6ICd0cnVlJ1xufTtcblxudmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbm9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgKTtcbiAgICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0ZWRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZWxcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCQxICh0YWdOYW1lLCB2bm9kZSkge1xuICB2YXIgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlIChfLCB2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGlmIChvbGRWbm9kZS5kYXRhLnJlZiAhPT0gdm5vZGUuZGF0YS5yZWYpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUsIHRydWUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiByZWdpc3RlclJlZiAodm5vZGUsIGlzUmVtb3ZhbCkge1xuICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gIGlmICghaXNEZWYoa2V5KSkgeyByZXR1cm4gfVxuXG4gIHZhciB2bSA9IHZub2RlLmNvbnRleHQ7XG4gIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gIHZhciByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG52YXIgZW1wdHlOb2RlID0gbmV3IFZOb2RlKCcnLCB7fSwgW10pO1xuXG52YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuZnVuY3Rpb24gc2FtZVZub2RlIChhLCBiKSB7XG4gIHJldHVybiAoXG4gICAgYS5rZXkgPT09IGIua2V5ICYmXG4gICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmIChcbiAgICAgIChcbiAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgIGEuaXNDb21tZW50ID09PSBiLmlzQ29tbWVudCAmJlxuICAgICAgICBpc0RlZihhLmRhdGEpID09PSBpc0RlZihiLmRhdGEpICYmXG4gICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICkgfHwgKFxuICAgICAgICBpc1RydWUoYS5pc0FzeW5jUGxhY2Vob2xkZXIpICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1ciwgdm5vZGUuZGF0YS5wcmUpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlLCBpc0luUHJlKSB7XG4gIGlmIChpc0luUHJlIHx8IGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCBWdWUgZnJvbSAndnVlJztcblxuaW1wb3J0IFNvbWVWdWVQYWdlIGZyb20gJy4vY29tcG9uZW50cy9Tb21lVnVlUGFnZS52dWUnO1xuXG5uZXcgVnVlKHtcbiAgICBlbDogJyN2dWVleGFtcGxlJyxcbiAgICByZW5kZXI6IGggPT4gaChTb21lVnVlUGFnZSksXG59KSJdLCJuYW1lcyI6WyJjb21wb25lbnQiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCJvcHRpb25zIiwiX19maWxlIiwiZGF0YSIsInBvdGF0b2VzIiwiX3ZtIiwidGhpcyIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwiX3YiLCJfcyIsIl93aXRoU3RyaXBwZWQiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsImNvbnRleHQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsImNhbGwiLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJhZGQiLCJfc3NyUmVnaXN0ZXIiLCIkcm9vdCIsIiRvcHRpb25zIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsImgiLCJleGlzdGluZyIsImJlZm9yZUNyZWF0ZSIsImNvbmNhdCIsImV4cG9ydHMiLCJlbXB0eU9iamVjdCIsIk9iamVjdCIsImZyZWV6ZSIsImlzVW5kZWYiLCJ2IiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsInZhbHVlIiwiaXNPYmplY3QiLCJvYmoiLCJfdG9TdHJpbmciLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInRvUmF3VHlwZSIsInNsaWNlIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJuIiwicGFyc2VGbG9hdCIsIlN0cmluZyIsIk1hdGgiLCJmbG9vciIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidGhlbiIsImNhdGNoIiwiQXJyYXkiLCJpc0FycmF5IiwiSlNPTiIsInN0cmluZ2lmeSIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwic3RyIiwiZXhwZWN0c0xvd2VyQ2FzZSIsIm1hcCIsImNyZWF0ZSIsImxpc3QiLCJzcGxpdCIsImkiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJhcnIiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiaGFzT3duUHJvcGVydHkiLCJoYXNPd24iLCJrZXkiLCJjYWNoZWQiLCJmbiIsImNhY2hlIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwicmVwbGFjZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJiaW5kIiwiRnVuY3Rpb24iLCJjdHgiLCJib3VuZEZuIiwiYSIsImwiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9sZW5ndGgiLCJ0b0FycmF5Iiwic3RhcnQiLCJyZXQiLCJleHRlbmQiLCJ0byIsIl9mcm9tIiwidG9PYmplY3QiLCJyZXMiLCJub29wIiwiYiIsIm5vIiwiaWRlbnRpdHkiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5IiwiZSIsIkRhdGUiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiYXN5bmMiLCJfbGlmZWN5Y2xlSG9va3MiLCJ1bmljb2RlUmVnRXhwIiwiaXNSZXNlcnZlZCIsImNoYXJDb2RlQXQiLCJkZWYiLCJlbnVtZXJhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9pc1NlcnZlciIsImJhaWxSRSIsIlJlZ0V4cCIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwid2luZG93IiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0lFIiwidGVzdCIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibWF0Y2giLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJpc1NlcnZlclJlbmRlcmluZyIsInVuZGVmaW5lZCIsImciLCJlbnYiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIl9TZXQiLCJoYXNTeW1ib2wiLCJTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIlNldCIsInNldCIsImhhcyIsImNsZWFyIiwid2FybiIsInRpcCIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiaGFzQ29uc29sZSIsImNvbnNvbGUiLCJjbGFzc2lmeVJFIiwibXNnIiwidm0iLCJ0cmFjZSIsImVycm9yIiwiaW5jbHVkZUZpbGUiLCJjaWQiLCJfaXNWdWUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJfY29tcG9uZW50VGFnIiwiZmlsZSIsIiRwYXJlbnQiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwibGFzdCIsInB1c2giLCJyZXBlYXQiLCJqb2luIiwidWlkIiwiRGVwIiwiaWQiLCJzdWJzIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwidGFyZ2V0IiwiYWRkRGVwIiwibm90aWZ5Iiwic29ydCIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsInBvcCIsIlZOb2RlIiwidGFnIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY2hpbGQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY3JlYXRlRW1wdHlWTm9kZSIsIm5vZGUiLCJjcmVhdGVUZXh0Vk5vZGUiLCJjbG9uZVZOb2RlIiwidm5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwiZm9yRWFjaCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwiYXJncyIsImxlbiIsImluc2VydGVkIiwicmVzdWx0Iiwib2IiLCJfX29iX18iLCJvYnNlcnZlQXJyYXkiLCJkZXAiLCJhcnJheUtleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwic2hvdWxkT2JzZXJ2ZSIsInRvZ2dsZU9ic2VydmluZyIsIk9ic2VydmVyIiwidm1Db3VudCIsInNyYyIsIl9fcHJvdG9fXyIsInByb3RvQXVnbWVudCIsImNvcHlBdWdtZW50Iiwid2FsayIsIm9ic2VydmUiLCJhc1Jvb3REYXRhIiwiaXNFeHRlbnNpYmxlIiwiZGVmaW5lUmVhY3RpdmUkJDEiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwiZGVwZW5kQXJyYXkiLCJuZXdWYWwiLCJtYXgiLCJkZWwiLCJpdGVtcyIsInN0cmF0cyIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImhvb2tzIiwiZGVkdXBlSG9va3MiLCJtZXJnZUFzc2V0cyIsImFzc2VydE9iamVjdFR5cGUiLCJlbCIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsInR5cGUiLCJrZXkkMSIsInByb3BzIiwibWV0aG9kcyIsImluamVjdCIsImNvbXB1dGVkIiwicHJvdmlkZSIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsIm1lcmdlT3B0aW9ucyIsImNvbXBvbmVudHMiLCJjaGVja0NvbXBvbmVudHMiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVJbmplY3QiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4IiwiQm9vbGVhbiIsInN0cmluZ0luZGV4IiwiZGVmYXVsdCIsIl9wcm9wcyIsImdldFR5cGUiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJyZXF1aXJlZCIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJoYXZlRXhwZWN0ZWRUeXBlcyIsInNvbWUiLCJ0IiwidmFsaWRhdG9yIiwibWVzc2FnZSIsInJlY2VpdmVkVHlwZSIsImlzRXhwbGljYWJsZSIsImVsZW0iLCJpc0Jvb2xlYW4iLCJzdHlsZVZhbHVlIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwiYXNzZXJ0UHJvcCIsInNpbXBsZUNoZWNrUkUiLCJmdW5jdGlvblR5cGVDaGVja1JFIiwiaXNTYW1lVHlwZSIsIk51bWJlciIsIkVYUExJQ0FCTEVfVFlQRVMiLCJoYW5kbGVFcnJvciIsImVyciIsImluZm8iLCJjdXIiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwidGltZXJGdW5jIiwiaW5pdFByb3h5IiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsIlByb21pc2UiLCJwIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJNdXRhdGlvbk9ic2VydmVyIiwic2V0SW1tZWRpYXRlIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJfcmVuZGVyUHJveHkiLCJtYXJrIiwibWVhc3VyZSIsInNlZW5PYmplY3RzIiwidHJhdmVyc2UiLCJfdHJhdmVyc2UiLCJzZWVuIiwiaXNBIiwiaXNGcm96ZW4iLCJkZXBJZCIsInBlcmYiLCJjbGVhck1hcmtzIiwiY2xlYXJNZWFzdXJlcyIsInN0YXJ0VGFnIiwiZW5kVGFnIiwibm9ybWFsaXplRXZlbnQiLCJwYXNzaXZlIiwib25jZSQkMSIsImNhcHR1cmUiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImNoZWNrUHJvcCIsImhhc2giLCJhbHRLZXkiLCJwcmVzZXJ2ZSIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsInNoaWZ0IiwiX2lzVkxpc3QiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsInNvdXJjZSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJhdHRycyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsInJlbmRlclNsb3QiLCJmYWxsYmFja1JlbmRlciIsImJpbmRPYmplY3QiLCJub2RlcyIsInNjb3BlZFNsb3RGbiIsIiRzY29wZWRTbG90cyIsIiRzbG90cyIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJtYXJrU3RhdGljIiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJ2YWx1ZXMiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfbCIsIl90IiwiX3EiLCJfaSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX2UiLCJfdSIsIl9nIiwiX2QiLCJfcCIsIkZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IiwiY29udGV4dFZtIiwidGhpcyQxIiwiX29yaWdpbmFsIiwiaXNDb21waWxlZCIsIm5lZWROb3JtYWxpemF0aW9uIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNjb3BlZFNsb3RzIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0IiwicmVuZGVyQ29udGV4dCIsImNsb25lIiwiZGV2dG9vbHNNZXRhIiwibWVyZ2VQcm9wcyIsImNvbXBvbmVudFZOb2RlSG9va3MiLCJpbml0IiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsIl9pc0NvbXBvbmVudCIsIl9wYXJlbnRWbm9kZSIsImlubGluZVRlbXBsYXRlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJwYXJlbnRWbm9kZSIsInJlbmRlckNoaWxkcmVuIiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwibmV3U2NvcGVkU2xvdHMiLCJvbGRTY29wZWRTbG90cyIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIl9yZW5kZXJDaGlsZHJlbiIsIl92bm9kZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsIm9sZExpc3RlbmVycyIsIl9wYXJlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCIkZm9yY2VVcGRhdGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsIl9pbmFjdGl2ZSIsImFjdGl2YXRlZENoaWxkcmVuIiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJjbGVhclRpbWVvdXQiLCJlbnN1cmVDdG9yIiwicmVqZWN0IiwicmVhc29uIiwiZGVsYXkiLCJ0aW1lb3V0IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsImNhbGxiYWNrIiwidHJhbnNmb3JtTW9kZWwiLCJrZXlJbkxvd2VyQ2FzZSIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJ2bm9kZXMiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibmF0aXZlT24iLCJhYnN0cmFjdCIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJmMSIsImYyIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJpcyIsInNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIiwicHJlIiwiYXBwbHlOUyIsInN0eWxlIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiZm9yY2UiLCJjb21wIiwiYmFzZSIsIl9fZXNNb2R1bGUiLCJ0b1N0cmluZ1RhZyIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImlzSW5JbmFjdGl2ZVRyZWUiLCJkaXJlY3QiLCJfZGlyZWN0SW5hY3RpdmUiLCIkY2hpbGRyZW4iLCJqIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0IiwicXVldWUiLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsIm5vdyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJiZWZvcmUiLCJydW4iLCJ1c2VyIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJfd2F0Y2hlciIsImNhbGxVcGRhdGVkSG9va3MiLCJlbWl0IiwidWlkJDIiLCJXYXRjaGVyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsIl93YXRjaGVycyIsImRlZXAiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImV4cHJlc3Npb24iLCJwYXRoIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImRlZmluZUNvbXB1dGVkIiwidXNlckRlZiIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwidWlkJDMiLCJzdXBlciIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiVnVlIiwiX2luaXQiLCJnZXRDb21wb25lbnROYW1lIiwibWF0Y2hlcyIsInBhdHRlcm4iLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJmaWx0ZXIiLCJlbnRyeSIsInBydW5lQ2FjaGVFbnRyeSIsImN1cnJlbnQiLCJfdWlkIiwidm5vZGVDb21wb25lbnRPcHRpb25zIiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiJHJlZnMiLCJpbml0TGlmZWN5Y2xlIiwiX2V2ZW50cyIsImluaXRFdmVudHMiLCJwYXJlbnREYXRhIiwiaW5pdFJlbmRlciIsImluaXRJbmplY3Rpb25zIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiaXNTU1IiLCJpbml0Q29tcHV0ZWQiLCJpbml0V2F0Y2giLCJpbml0U3RhdGUiLCJpbml0UHJvdmlkZSIsIl9uYW1lIiwiaW5pdE1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJzdGF0ZU1peGluIiwiaG9va1JFIiwiJG9uY2UiLCJpJDEiLCJjYnMiLCJsb3dlckNhc2VFdmVudCIsImV2ZW50c01peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJsaWZlY3ljbGVNaXhpbiIsIiRuZXh0VGljayIsIl9yZW5kZXIiLCJyZWYiLCJyZW5kZXJFcnJvciIsInJlbmRlck1peGluIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjYWNoZVZOb2RlIiwidm5vZGVUb0NhY2hlIiwia2V5VG9DYWNoZSIsInBhcnNlSW50IiwiY3JlYXRlZCIsImRlc3Ryb3llZCIsIm1vdW50ZWQiLCJ1cGRhdGVkIiwiYnVpbHRJbkNvbXBvbmVudHMiLCJjb25maWdEZWYiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJkZWxldGUiLCJvYnNlcnZhYmxlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0VXNlIiwibWl4aW4iLCJpbml0TWl4aW4kMSIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJDb21wIiwiaW5pdFByb3BzJDEiLCJpbml0Q29tcHV0ZWQkMSIsImluaXRFeHRlbmQiLCJkZWZpbml0aW9uIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiaW5pdEdsb2JhbEFQSSIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJpc0ZhbHN5QXR0clZhbHVlIiwibWVyZ2VDbGFzc0RhdGEiLCJzdGF0aWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZpZWQiLCJzdHJpbmdpZnlBcnJheSIsInN0cmluZ2lmeU9iamVjdCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJpc1RleHRJbnB1dFR5cGUiLCJub2RlT3BzIiwidGFnTmFtZSIsIm11bHRpcGxlIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsInBhcmVudE5vZGUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJlbmRJZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGRBcmciLCJhcmciLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwic2V0QXR0ciIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwiaXNJblByZSIsImJhc2VTZXRBdHRyIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJjaGlsZE5vZGUiLCJkeW5hbWljQ2xhc3MiLCJnZW5DbGFzc0ZvclZub2RlIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsInRhcmdldCQxIiwia2xhc3MiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsInVwZGF0ZURPTUxpc3RlbmVycyIsImNoYW5nZSIsIm5vcm1hbGl6ZUV2ZW50cyIsInN2Z0NvbnRhaW5lciIsImV2ZW50cyIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJjaGlsZE5vZGVzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiY2hlY2tWYWwiLCJjb21wb3NpbmciLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJudW1iZXIiLCJ0cmltIiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJwYXJzZVN0eWxlVGV4dCIsImNzc1RleHQiLCJwcm9wZXJ0eURlbGltaXRlciIsIm5vcm1hbGl6ZVN0eWxlRGF0YSIsIm5vcm1hbGl6ZVN0eWxlQmluZGluZyIsInN0YXRpY1N0eWxlIiwiYmluZGluZ1N0eWxlIiwiZW1wdHlTdHlsZSIsImNzc1ZhclJFIiwiaW1wb3J0YW50UkUiLCJzZXRQcm9wIiwic2V0UHJvcGVydHkiLCJub3JtYWxpemVkTmFtZSIsIm5vcm1hbGl6ZSIsInZlbmRvck5hbWVzIiwiY2FwTmFtZSIsInVwZGF0ZVN0eWxlIiwib2xkU3RhdGljU3R5bGUiLCJvbGRTdHlsZUJpbmRpbmciLCJub3JtYWxpemVkU3R5bGUiLCJvbGRTdHlsZSIsIm5ld1N0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImdldFN0eWxlIiwid2hpdGVzcGFjZVJFIiwiYWRkQ2xhc3MiLCJjbGFzc0xpc3QiLCJnZXRBdHRyaWJ1dGUiLCJyZW1vdmVDbGFzcyIsInRhciIsInJlc29sdmVUcmFuc2l0aW9uIiwiY3NzIiwiYXV0b0Nzc1RyYW5zaXRpb24iLCJlbnRlckNsYXNzIiwiZW50ZXJUb0NsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZVRvQ2xhc3MiLCJsZWF2ZUFjdGl2ZUNsYXNzIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJuZXh0RnJhbWUiLCJhZGRUcmFuc2l0aW9uQ2xhc3MiLCJ0cmFuc2l0aW9uQ2xhc3NlcyIsInJlbW92ZVRyYW5zaXRpb25DbGFzcyIsIndoZW5UcmFuc2l0aW9uRW5kcyIsImdldFRyYW5zaXRpb25JbmZvIiwicHJvcENvdW50IiwiZW5kZWQiLCJlbmQiLCJvbkVuZCIsInRyYW5zZm9ybVJFIiwic3R5bGVzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJzIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiX2xlYXZlQ2IiLCJjYW5jZWxsZWQiLCJ0cmFuc2l0aW9uIiwiX2VudGVyQ2IiLCJub2RlVHlwZSIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImNoZWNrRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwicm0iLCJiZWZvcmVMZWF2ZSIsImFmdGVyTGVhdmUiLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJleHBsaWNpdExlYXZlRHVyYXRpb24iLCJwZXJmb3JtTGVhdmUiLCJpbnZva2VyRm5zIiwiX2VudGVyIiwicGF0Y2giLCJiYWNrZW5kIiwibW9kdWxlcyIsInJlbW92ZU5vZGUiLCJpc1Vua25vd25FbGVtZW50JCQxIiwiaW5WUHJlIiwiaWdub3JlIiwiY3JlYXRpbmdFbG1JblZQcmUiLCJjcmVhdGVFbG0iLCJpbnNlcnRlZFZub2RlUXVldWUiLCJwYXJlbnRFbG0iLCJyZWZFbG0iLCJuZXN0ZWQiLCJvd25lckFycmF5IiwiaXNSZWFjdGl2YXRlZCIsImluaXRDb21wb25lbnQiLCJpbm5lck5vZGUiLCJhY3RpdmF0ZSIsInJlYWN0aXZhdGVDb21wb25lbnQiLCJzZXRTY29wZSIsImNyZWF0ZUNoaWxkcmVuIiwiaW52b2tlQ3JlYXRlSG9va3MiLCJwZW5kaW5nSW5zZXJ0IiwiaXNQYXRjaGFibGUiLCJyZWYkJDEiLCJjaGVja0R1cGxpY2F0ZUtleXMiLCJhbmNlc3RvciIsImFkZFZub2RlcyIsInN0YXJ0SWR4IiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJzZWVuS2V5cyIsImZpbmRJZHhJbk9sZCIsIm9sZENoIiwicGF0Y2hWbm9kZSIsInJlbW92ZU9ubHkiLCJoeWRyYXRlIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwib2xkRWxtIiwicGF0Y2hhYmxlIiwiaSQyIiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJvIiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwic2VsZWN0ZWQiLCJvcHRpb24iLCJzZWxlY3RlZEluZGV4IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb25Qcm9wcyIsIm1vZGUiLCJnZXRSZWFsQ2hpbGQiLCJjb21wT3B0aW9ucyIsImV4dHJhY3RUcmFuc2l0aW9uRGF0YSIsInBsYWNlaG9sZGVyIiwicmF3Q2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsIm9sZENoaWxkIiwiaXNTYW1lQ2hpbGQiLCJkZWxheWVkTGVhdmUiLCJtb3ZlQ2xhc3MiLCJUcmFuc2l0aW9uR3JvdXAiLCJiZWZvcmVNb3VudCIsImtlcHQiLCJwcmV2Q2hpbGRyZW4iLCJyYXdDaGlsZHJlbiIsInRyYW5zaXRpb25EYXRhIiwicmVtb3ZlZCIsImMkMSIsInBvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJuZXdQb3MiLCJvbGRQb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsInBsYXRmb3JtQ29tcG9uZW50cyIsImF0dHIiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInVwZGF0ZUNvbXBvbmVudCIsInRlbXBsYXRlIiwibW91bnRDb21wb25lbnQiLCJxdWVyeVNlbGVjdG9yIiwicXVlcnkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2xvYmFsVGhpcyIsInIiXSwic291cmNlUm9vdCI6IiJ9